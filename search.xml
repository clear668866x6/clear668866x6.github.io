<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>整理</title>
    <url>/2025/02/14/%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>每日练习</title>
    <url>/2025/02/05/%E6%AF%8F%E6%97%A5%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h1><h2 id="2018A-Card-Partition-1600-思维题"><a href="#2018A-Card-Partition-1600-思维题" class="headerlink" title="2018A-Card Partition *1600 思维题"></a>2018A-Card Partition <strong>*1600</strong> 思维题</h2><ul>
<li>这道题就是简单的枚举，因为 $n$ 不大。因此就直接枚举每组分成多少张，这样就能算出组数了，这里的总数是把加的牌也算进去的，这样就是看最坏的情况下能否满足题目条件。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve()&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    int mx=0,s=0;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)cin&gt;&gt;w[i],mx=max(mx,w[i]),s+=w[i];</span><br><span class="line"></span><br><span class="line">    int ls=s+k;</span><br><span class="line"></span><br><span class="line">    int ans=0;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        int t=ls/i;//假定分成t份</span><br><span class="line">        if(t&gt;=mx&amp;&amp;t*i&gt;=s&amp;&amp;t*i&lt;=ls)ans=i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2004D-Colored-Portals-1600"><a href="#2004D-Colored-Portals-1600" class="headerlink" title="2004D-Colored Portals *1600"></a>2004D-Colored Portals <strong>*1600</strong></h2><p><del>真的受不了这种题，看错一个地方调了我一个半小时。</del></p>
<ul>
<li><p>思路很简单，因为只有 $4$ 种颜色取 $2$ 种，那么总共也就有 $6$ 种情况。可以推出答案就两种情况——在同一层、不在同一层（可以证明只需要一个辅助城市即可）</p>
</li>
<li><p>这里取巧：每种颜色组合在每一层出现的最远位置和最近位置记录下来，这里就直接用 <code>vector&lt;array&lt;int,6&gt;&gt;(n+1,&#123;-1,-1,-1,-1,-1,-1&#125;)</code> 来记录，就是这里，我没想到。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int n,q;</span><br><span class="line">map&lt;string,int&gt;id&#123;&#123;&quot;BG&quot;,1&#125;,&#123;&quot;BR&quot;,2&#125;,&#123;&quot;BY&quot;,3&#125;,&#123;&quot;GR&quot;,4&#125;,&#123;&quot;GY&quot;,5&#125;,&#123;&quot;RY&quot;,6&#125;,</span><br><span class="line">    &#123;&quot;GB&quot;,1&#125;,&#123;&quot;RB&quot;,2&#125;,&#123;&quot;YB&quot;,3&#125;,&#123;&quot;RG&quot;,4&#125;,&#123;&quot;YG&quot;,5&#125;,&#123;&quot;YR&quot;,6&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void solve()&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt;a(n+1,0);</span><br><span class="line">    vector&lt;string&gt;s(n+1);</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        a[i]=id[s[i]];        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;array&lt;int,7&gt;&gt;b(n+1,&#123;-1,-1,-1,-1,-1,-1,-1&#125;);</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        b[i]=b[i-1];</span><br><span class="line">        b[i][a[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;array&lt;int,7&gt;&gt;c(n+2,&#123;-1,-1,-1,-1,-1,-1,-1&#125;);</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;=6;i++)c[n+1][i]=-1;</span><br><span class="line"></span><br><span class="line">    for(int i=n;i&gt;=1;i--)&#123;</span><br><span class="line">        c[i]=c[i+1];</span><br><span class="line">        c[i][a[i]]=i;</span><br><span class="line">        // cout&lt;&lt;a[i]&lt;&lt;&#x27; &#x27;&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // cout&lt;&lt;c[2][2]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    while(q--)&#123;</span><br><span class="line">        int x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"></span><br><span class="line">        if(x&gt;y)swap(x,y);</span><br><span class="line"></span><br><span class="line">        if(x==y)&#123;</span><br><span class="line">            cout&lt;&lt;0&lt;&lt;endl;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int ans=1e18;</span><br><span class="line"></span><br><span class="line">        if(s[x][0]==s[y][0]||s[x][0]==s[y][1]||s[x][1]==s[y][0]||s[x][1]==s[y][1])&#123;</span><br><span class="line">            cout&lt;&lt;abs(x-y)&lt;&lt;endl;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int t1=a[x],t2=a[y];</span><br><span class="line">        bool f=false;</span><br><span class="line">        // cout&lt;&lt;t1&lt;&lt;&#x27; &#x27;&lt;&lt;t2&lt;&lt;endl;</span><br><span class="line">        for(int i=1;i&lt;=6;i++)&#123;</span><br><span class="line">            if(i!=t1&amp;&amp;i!=t2)&#123;</span><br><span class="line">                // cout&lt;&lt;b[x][i]&lt;&lt;&#x27; &#x27;&lt;&lt;b[y][i]&lt;&lt;&#x27; &#x27;&lt;&lt;c[x][i]&lt;&lt;&#x27; &#x27;&lt;&lt;c[y][i]&lt;&lt;endl;</span><br><span class="line">                if(b[x][i]!=-1||b[y][i]!=-1||c[x][i]!=-1||c[y][i]!=-1)&#123;</span><br><span class="line">                    f=1;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(!f)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=1;i&lt;=6;i++)&#123;</span><br><span class="line">            if(i!=t1&amp;&amp;i!=t2)&#123;</span><br><span class="line">                if(b[x][i]!=-1)&#123;</span><br><span class="line">                    ans=min(ans,abs(b[x][i]-x)+abs(b[x][i]-y));</span><br><span class="line">                &#125;</span><br><span class="line">                if(b[y][i]!=-1)&#123;</span><br><span class="line">                    ans=min(ans,abs(b[y][i]-x)+abs(b[y][i]-y));</span><br><span class="line">                &#125;</span><br><span class="line">                if(c[x][i]!=-1)&#123;</span><br><span class="line">                    ans=min(ans,abs(c[x][i]-x)+abs(c[x][i]-y));</span><br><span class="line">                &#125;</span><br><span class="line">                if(c[y][i]!=-1)&#123;</span><br><span class="line">                    ans=min(ans,abs(c[y][i]-x)+abs(c[y][i]-y));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1996E-Decode-1600-前缀和-思维"><a href="#1996E-Decode-1600-前缀和-思维" class="headerlink" title="1996E-Decode *1600 前缀和+思维"></a>1996E-Decode <strong>*1600</strong> 前缀和+思维</h2><ul>
<li>$n$ 很大，要求两个变量的方案和，可以想到<strong>贡献法</strong>。</li>
<li>很容易想到对于某一个满足的如 $11111001111$ 如果满足题意，答案就是 $l\times r$。</li>
<li>有两个变量不好算，因此枚举一个变量：对于每一个 $l,r$，此时固定 $r$，都有：</li>
</ul>
<script type="math/tex; mode=display">ans=l_1*r+l_2*r+l_3*r+...+l_k*r</script><script type="math/tex; mode=display">ans=\sum_{i=1}^{k}{l_k}*r</script><p>因此我们只需要算 $\sum_{i=1}^{k}{l_k}$ 即可，这个我们可以用 <code>map</code> 来解决。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve()&#123;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line"></span><br><span class="line">    n=s.size();</span><br><span class="line"></span><br><span class="line">    s=&#x27; &#x27;+s;</span><br><span class="line"></span><br><span class="line">    int ans=0;</span><br><span class="line">    map&lt;int,int&gt;S;</span><br><span class="line">    S[0]=1;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        sum[i]=sum[i-1]+(s[i]==&#x27;1&#x27;?1:-1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        ans=(ans+(n-i+1)*(S[sum[i]])%mod)%mod;</span><br><span class="line">        S[sum[i]]+=i+1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="2-6水题3-1600题6"><a href="#2-6水题3-1600题6" class="headerlink" title="2.6水题3+1600题6"></a>2.6水题3+1600题6</h1><h2 id="1994C-Hungry-Games-1600-二分-思维"><a href="#1994C-Hungry-Games-1600-二分-思维" class="headerlink" title="1994C-Hungry Games *1600 二分+思维"></a>1994C-Hungry Games <strong>*1600</strong> 二分+思维</h2><ul>
<li>就是一个二分去划分边界，对于一个左端点为 $i$ 的区间，可以分为两部分，一部分为 $a_i$~$a_q$​，这部分他们的总和就是 $≤x$，显然不涉及到“归零”这个操作，答案直接加上 $q−i−1$。</li>
<li><code>accumulate()</code> 第三个参数是基准值，也就是 $f_1+f_2+…+f_n+t$，$t$ 就是基准值。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)cin&gt;&gt;w[i],s[i]=s[i-1]+w[i];</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt;f(n+2);</span><br><span class="line"></span><br><span class="line">    for(int i=n;i&gt;=0;i--)&#123;</span><br><span class="line">        int q=upper_bound(s+1,s+1+n,s[i]+k)-s;//ai~aq</span><br><span class="line">        f[i]=f[q]+q-i-1;</span><br><span class="line">    &#125;</span><br><span class="line">    int ans=0;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;accumulate(f.begin(),f.end(),0ll)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>错误次数：2</p>
<p>错误原因：已经想到二分/双指针去做，但没有深入思考边界的处理。</p>
</blockquote>
<h2 id="1978D-Elections-1600-思维-前缀和"><a href="#1978D-Elections-1600-思维-前缀和" class="headerlink" title="1978D-Elections *1600 思维+前缀和"></a>1978D-Elections <strong>*1600</strong> 思维+前缀和</h2><p>思路很清晰，答案就三种情况：0，i，i-1。<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    w[1]+=k;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)s[i]=s[i-1]+w[i];</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        pre[i]=max(pre[i-1],w[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=n;i&gt;=1;i--)&#123;</span><br><span class="line">        suf[i]=max(suf[i+1],w[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int t=*max_element(w+1,w+1+n);</span><br><span class="line"></span><br><span class="line">    int cnt=0,id=0;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        if(t==w[i])&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        if(t==w[i])&#123;</span><br><span class="line">            id=i;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(w[1]&gt;=t)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;0 &quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        cout&lt;&lt;&quot;1 &quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=2;i&lt;=n;i++)&#123;</span><br><span class="line">        if(w[i]&gt;=t)&#123;</span><br><span class="line">            if(w[i]==t&amp;&amp;cnt!=1&amp;&amp;i!=id)&#123;</span><br><span class="line">                cout&lt;&lt;i-1&lt;&lt;&#x27; &#x27;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                cout&lt;&lt;0&lt;&lt;&#x27; &#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            int ans=i-1;</span><br><span class="line">            if(s[i]&lt;t)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;ans&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>错误次数：2</p>
<p>错误原因：要用前缀和去比较</p>
</blockquote>
<h2 id="1956C-Nene’s-Magical-Matrix-1600-构造"><a href="#1956C-Nene’s-Magical-Matrix-1600-构造" class="headerlink" title="1956C-Nene’s Magical Matrix *1600 构造"></a>1956C-Nene’s Magical Matrix <strong>*1600</strong> 构造</h2><ul>
<li>构造方案是行和列的赋值，其实通过多次画图可以知道：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3 4 5</span><br><span class="line">2 2 3 4 5</span><br><span class="line">3 3 3 4 5</span><br><span class="line">4 4 4 4 5</span><br><span class="line">5 5 5 5 5</span><br></pre></td></tr></table></figure></li>
<li>这种方案是最优的，而且要输出方案也很好写，我们只需要从外到内而且排列都不需要变换。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    int ans=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        ans+=(i*i+(i+1+n)*(n-i)/2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;&#x27; &#x27;&lt;&lt;n*2&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    FORD(i,1,n)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;1 &quot;&lt;&lt;i&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        FOR(j,1,n)cout&lt;&lt;j&lt;&lt;&quot; \n&quot;[j==n];</span><br><span class="line">        cout&lt;&lt;&quot;2 &quot;&lt;&lt;i&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        FOR(j,1,n)cout&lt;&lt;j&lt;&lt;&quot; \n&quot;[j==n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>错误次数：1</p>
<p>错误原因：布置行了后面开始考虑列的时候忽略了行的修改。</p>
</blockquote>
<h2 id="1957C-How-Does-the-Rook-Move-1600-排列组合"><a href="#1957C-How-Does-the-Rook-Move-1600-排列组合" class="headerlink" title="1957C-How Does the Rook Move? *1600 排列组合"></a>1957C-How Does the Rook Move? <strong>*1600</strong> 排列组合</h2><ul>
<li>这种就是画个图枚举，可以发现:</li>
<li><ul>
<li>如果你画在对角线上机器人就没有地方画了，此时就是随便放，方案也就是 $C_{n}^{i}$，其中 $n$ 表示之前下完棋剩下棋盘的行数，$i$ 表示下了 $i$ 次放在对角线的棋，<strong>这里的 $n-i$ 是偶数，如果不是的情况下，那么会对下面不在对角线的情况下会下不完剩余的列</strong>。</li>
</ul>
</li>
<li><ul>
<li>除对角线画，一共有 $C_{n-i}^{j}\times j!$，$j=\frac{n-i}{2}$。</li>
</ul>
</li>
<li>那么答案就是二者乘积之和。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int qmi(int a,int b)&#123;</span><br><span class="line">    int res=1;</span><br><span class="line">    while(b)&#123;</span><br><span class="line">        if(b&amp;1)res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b/=2;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void init(int x)&#123;</span><br><span class="line">    fac[0]=infac[0]=1;</span><br><span class="line">    FOR(i,1,x)&#123;</span><br><span class="line">        fac[i]=fac[i-1]*i%mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    infac[x]=qmi(fac[x],mod-2);</span><br><span class="line"></span><br><span class="line">    FORD(i,1,x-1)&#123;</span><br><span class="line">        infac[i]=infac[i+1]*(i+1)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int C(int x,int y)&#123;</span><br><span class="line">    return fac[x]*infac[y]%mod*infac[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    map&lt;int,int&gt;S;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,k)&#123;</span><br><span class="line">        cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">        S[x[i]]=S[y[i]]=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n=n-S.size();</span><br><span class="line"></span><br><span class="line">    int ans=0;</span><br><span class="line"></span><br><span class="line">    FOR2(i,n&amp;1,n)&#123;</span><br><span class="line">        int j=(n-i)/2;</span><br><span class="line">        ans=(ans+C(n,i)*C(n-i,j)%mod*fac[j]%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1971F-Circle-Perimeter-1600-数学"><a href="#1971F-Circle-Perimeter-1600-数学" class="headerlink" title="1971F-Circle Perimeter *1600 数学"></a>1971F-Circle Perimeter <strong>*1600</strong> 数学</h2><p><del>服了，我怎么会一直往那个 <strong>皮克定理</strong> 那边去想</del></p>
<ul>
<li>公式推导：</li>
</ul>
<script type="math/tex; mode=display">r\le \sqrt{x^2+y^2} < r+1</script><script type="math/tex; mode=display">r^2\le x^2+y^2<(r+1)^2</script><script type="math/tex; mode=display">r^2-y^2\le x^2 <(r+1)^2-y^2</script><script type="math/tex; mode=display">\sqrt{r^2-y^2}\le x<\sqrt{(r+1)^2-y^2}</script><ul>
<li><p>那么 $x<em>{min}=\lfloor \sqrt{r^2-y^2} \rfloor$ ，$x</em>{max}=\lceil\sqrt{(r+1)^2-y^2} \rceil$</p>
</li>
<li><p>此时直接枚举 $y$ 就可以算出 $x$ 了，最后答案 $\times 4$ 就可以了。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    int ans=0;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        int mx=floor(sqrt((n+1)*(n+1)-i*i-0.5));</span><br><span class="line">        int mn=ceil(sqrt(n*n-i*i));</span><br><span class="line">        ans+=mx-mn+1;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans*4&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>错误次数： 1</p>
<p>错误原因：皮克定理是用来算多边形的面积跟整点数的关系，圆的面积不是定数，如果要用的话很难取 $eps$，因此最好不用。</p>
</blockquote>
<h2 id="1976C-Job-Interview-1600-思维"><a href="#1976C-Job-Interview-1600-思维" class="headerlink" title="1976C-Job Interview *1600 思维"></a>1976C-Job Interview <strong>*1600</strong> 思维</h2><ul>
<li>总共的职位数只有 $n+m$ 个，但总共有 $n+m+1$ 个人，为了更好的讨论，这里直接不选最后一个人，此时就很好做了，用的是贪心。</li>
<li>这里我是用 $vis_i$ 表示第 $i$ 个人被选上测试职业，$ca$ 表示选了 $ca$ 个程序员，$f_i$ 表示该人不被选上个人可以<strong>多</strong>获得的价值。</li>
<li>此时的 $f_i$ 此时就是一个差值（变化量），默认不选最后一个人的答案是 $ans$。</li>
<li>然后，发现如果改为不选第 $i$ 个人，实际上就是让下一个原本要选某一个职业但是没法选的人选某一个职业​ 然后还要有下一个人顶替他选的岗位，以此类推。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n+m+1;i++)cin&gt;&gt;a[i];</span><br><span class="line">    for(int i=1;i&lt;=n+m+1;i++)cin&gt;&gt;b[i];</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt;f(n+m+2,0),vis(n+m+2,0);</span><br><span class="line"></span><br><span class="line">    int ca=0,cb=0,ans=0;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n+m;i++)&#123;//默认不选最后一个</span><br><span class="line">        if(ca==n)ans+=b[i],vis[i]=0;</span><br><span class="line">        else if(cb==m)ans+=a[i],vis[i]=1;</span><br><span class="line">        else if(a[i]&gt;b[i])vis[i]=1,ans+=a[i],ca++;</span><br><span class="line">        else ans+=b[i],vis[i]=0,cb++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ca=n+m+1,cb=n+m+1;</span><br><span class="line"></span><br><span class="line">    for(int i=n+m;i;i--)&#123;</span><br><span class="line">        if(ca==n+m+1&amp;&amp;vis[i])f[i]=f[ca]+a[ca];</span><br><span class="line">        else if(cb==n+m+1&amp;&amp;!vis[i])f[i]=f[cb]+b[cb];</span><br><span class="line">        else if(vis[i])f[i]=f[ca]+a[ca]-b[ca];</span><br><span class="line">        else f[i]=f[cb]+b[cb]-a[cb];</span><br><span class="line">        if(vis[i]&amp;&amp;b[i]&gt;a[i])cb=i;</span><br><span class="line">        else if(!vis[i]&amp;&amp;b[i]&lt;a[i])ca=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n+m;i++)&#123;</span><br><span class="line">        cout&lt;&lt;(ans-(vis[i]?a[i]:b[i])+f[i])&lt;&lt;&#x27; &#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><del>没想出来这么做，憨了</del></p>
</blockquote>
<h2 id="HDU-6702-amp-位运算"><a href="#HDU-6702-amp-位运算" class="headerlink" title="HDU-6702-&amp; 位运算"></a>HDU-6702-&amp; 位运算</h2><ul>
<li>容易发现要让答案最小，对每一位进行分析很容易发现，当 $a,b$ 在同一位均为 $1$ 的情况下，此时 $c$ 填 $1$.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    </span><br><span class="line">    int ans=0;</span><br><span class="line"></span><br><span class="line">    for(int i=34;i&gt;=0;i--)&#123;</span><br><span class="line">        if((a&gt;&gt;i&amp;1)&amp;&amp;(b&gt;&gt;i&amp;1))&#123;</span><br><span class="line">            ans|=(1ull&lt;&lt;(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(ans==0)&#123;</span><br><span class="line">        if(((a^0)&amp;(b^0))==0)&#123;</span><br><span class="line">            cout&lt;&lt;1&lt;&lt;endl;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            cout&lt;&lt;0&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-6707-Shuffle-Card-STL：栈"><a href="#HDU-6707-Shuffle-Card-STL：栈" class="headerlink" title="HDU-6707-Shuffle Card STL：栈"></a>HDU-6707-Shuffle Card STL：栈</h2><ul>
<li>没什么好说的。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    stack&lt;int&gt;stk;</span><br><span class="line"></span><br><span class="line">    while(m--)&#123;</span><br><span class="line">        int x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        stk.push(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(stk.size())&#123;</span><br><span class="line">        int x=stk.top();</span><br><span class="line">        stk.pop();</span><br><span class="line">        if(!vis[x])&#123;</span><br><span class="line">            cout&lt;&lt;x&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[x]=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        if(!vis[w[i]])&#123;</span><br><span class="line">            cout&lt;&lt;w[i]&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HDU-6708-Windows-Of-CCPC找规律"><a href="#HDU-6708-Windows-Of-CCPC找规律" class="headerlink" title="HDU-6708-Windows Of CCPC找规律"></a>HDU-6708-Windows Of CCPC找规律</h2><ul>
<li>根据这个: <img src="https://cdn.vjudge.net.cn/afbcb5c2cef9da397ceb1c5aadddc45b?v=1723071497" alt=""></li>
</ul>
<p>和：</p>
<p><img src="https://cdn.vjudge.net.cn/cba282549674e44e31536068319c9ff8?v=1723071497" alt=""></p>
<ul>
<li><p>又因为数组的大小是 $2$ 的幂次方且都是从 $2^{n-1}$ 得到，因此我们可以对上述字母分块，我们可以很容易发现：第一块和第四块是相同的，第二块和第三块是相同的。</p>
</li>
<li><p>块数划分编号：</p>
</li>
</ul>
<p>1 2 3 4</p>
<ul>
<li>然后直接打表就可以了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void init()&#123;</span><br><span class="line">    s[1][1]=s[1][2]=s[2][2]=&#x27;C&#x27;;</span><br><span class="line">    s[2][1]=&#x27;P&#x27;;</span><br><span class="line"></span><br><span class="line">    for(int i=2;i&lt;=10;i++)&#123;</span><br><span class="line">        int l=pow(2,i-1);</span><br><span class="line">        int r=pow(2,i);</span><br><span class="line">        for(int j=1;j&lt;=l;j++)&#123;</span><br><span class="line">            for(int k=l+1;k&lt;=r;k++)&#123;</span><br><span class="line">                s[j+l][k]=s[j][k]=s[j][k-l];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int j=1;j&lt;=l;j++)&#123;</span><br><span class="line">            for(int k=1;k&lt;=l;k++)&#123;</span><br><span class="line">                s[j+l][k]=(s[j][k]==&#x27;C&#x27;?&#x27;P&#x27;:&#x27;C&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    n=pow(2,n);</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        for(int j=1;j&lt;=n;j++)&#123;</span><br><span class="line">            cout&lt;&lt;s[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-7-1600-1800乱刷"><a href="#2-7-1600-1800乱刷" class="headerlink" title="2.7 1600-1800乱刷"></a>2.7 1600-1800乱刷</h1><p><del>今天感觉什么事情都没干，昨晚睡太晚导致今天早上起不来，然后打算下午睡个觉，没想到又浪费了很多时间，服了，今天约等于也就只有5个小时刷题时间，太少了，而且做的又少，难受，今晚又做题做累了，明天又很冷，不知道会不会起得来。</del></p>
<p>这几天计划是刷1600-2400的题，康复训练，已经很久没有做 <code>codeforces</code> 的题了。</p>
<h2 id="1946C-Tree-Cutting-1600-二分-dfs"><a href="#1946C-Tree-Cutting-1600-二分-dfs" class="headerlink" title="1946C-Tree Cutting *1600 二分+dfs"></a>1946C-Tree Cutting <strong>*1600</strong> 二分+dfs</h2><ul>
<li>这个一看肯定跟子树有关系，因此就得维护 <code>siz</code> 数组。</li>
<li>如果选某一条边，此时就让它的 <code>siz</code> 清零，这样不会对后面产生影响。</li>
<li>题目的答案具有单调性（如果给的答案太大了，可以通过缩小区间来减小答案的范围），可以很容易写出二分。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    VII g(n+1);</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n-1)&#123;</span><br><span class="line">        int a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        g[a].emplace_back(b);</span><br><span class="line">        g[b].emplace_back(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt;siz(n+1,0);</span><br><span class="line">    int cnt=0;</span><br><span class="line"></span><br><span class="line">    function&lt;void(int,int,int)&gt; dfs=[&amp;](int u,int fa,int lim)&#123;</span><br><span class="line">        siz[u]=1;</span><br><span class="line">        for(auto&amp; j:g[u])&#123;</span><br><span class="line">            if(j==fa)continue;</span><br><span class="line">            dfs(j,u,lim);</span><br><span class="line">            siz[u]+=siz[j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if(siz[u]&gt;=lim)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            siz[u]=0;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(u==1&amp;&amp;siz[u]&lt;lim&amp;&amp;cnt==k)cnt=0;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    function&lt;bool(int)&gt;check=[&amp;](int x)&#123;</span><br><span class="line">        siz.clear();</span><br><span class="line">        cnt=0;</span><br><span class="line">        dfs(1,0,x);</span><br><span class="line">        return cnt&lt;=k;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    int l=0,r=n+1;</span><br><span class="line"></span><br><span class="line">    while(l+1!=r)&#123;</span><br><span class="line">        int mid=l+r&gt;&gt;1;</span><br><span class="line">        if(check(mid))r=mid;</span><br><span class="line">        else l=mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>总结：思路很简单的，认真考虑是可以很快的想出来。</p>
</blockquote>
<h2 id="2020C-Bitwise-Balancing-1600-位运算"><a href="#2020C-Bitwise-Balancing-1600-位运算" class="headerlink" title="2020C-Bitwise Balancing *1600 位运算"></a>2020C-Bitwise Balancing <strong>*1600</strong> 位运算</h2><ul>
<li>这道题就直接枚举每一位做，然后发现如果在第 $i$ 位下，$b=1,c=0,d=1$，这种情况是允许的，还有就是 $b=0,c=1,d=1$ 也是允许的，其他情况均不行。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"></span><br><span class="line">    int a=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,0,61)&#123;</span><br><span class="line">        int x,y,z;</span><br><span class="line">        x=((b&gt;&gt;i)&amp;1);</span><br><span class="line">        y=((c&gt;&gt;i)&amp;1);</span><br><span class="line">        z=((d&gt;&gt;i)&amp;1);</span><br><span class="line">        if(x!=z)&#123;</span><br><span class="line">            if(1-y!=z)&#123;</span><br><span class="line">                cout&lt;&lt;-1&lt;&lt;endl;</span><br><span class="line">                return;    </span><br><span class="line">            &#125;</span><br><span class="line">            a|=(1ll&lt;&lt;(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：位运算的题很多情况下都得按位看，然后有的时候可能会用枚举答案的思想来做题。</p>
</blockquote>
<h2 id="2035C-Alya-and-Permutation-1600-构造-位运算"><a href="#2035C-Alya-and-Permutation-1600-构造-位运算" class="headerlink" title="2035C-Alya and Permutation *1600 构造+位运算"></a>2035C-Alya and Permutation <strong>*1600</strong> 构造+位运算</h2><ul>
<li>这种题你乍一看很没有思路，此时可以发现不同点：奇数和偶数它们的答案是不同的。这点可以通过样例来看。</li>
<li>因为奇数最后一次操作是与，因为与会使答案$\le n$，所以盲猜答案是 $n$。</li>
<li>因为偶数最后一次操作是或，或能让答案 $&gt;=n$，所以很容易知道答案肯定是 $2^{\lfloor{\log_{2}n}\rfloor}-1$。</li>
<li>其实最关键的是答案的构造，这里分类讨论。</li>
<li><ul>
<li>奇数：因为最后一次操作是与，然后最后一位数肯定是与 $n$，那么 $n$ 的前面操作也要使得结果为 $n$，要不然结果就不会等于 $n$ 了。发现 $1,n-1,n$ 这种组合可以，因为是先与 $1$，此时你不管前面如何，最低位必为 $1$（因为 $n$ 是奇数）。</li>
</ul>
</li>
<li><ul>
<li>偶数：因为最后一次操作是或，那么你要让答案等于 $2^{\lfloor{\log_{2}n}\rfloor+1}-1$，就得让除最高位外其余的均为 $1$，然后在此数前面的只需要提供最高位即可。那么 $n,n-1,2^{\lfloor{\log_{2}n}\rfloor}-1$ 满足要求。</li>
</ul>
</li>
<li><ul>
<li>偶数还有一种特殊情况，就是很有可能 $n=2^{\lfloor{\log_{2}n}\rfloor}$，那么前面就不能有 $n-1$，此时 $1,n-3,n-2,n-1,n$ 满足条件。因为 $n-1$ 的二进制就是全 $1$ 的数字，但你肯定不能让 $n-1$ 消失，又因为 $n-1$ 前的操作符是与，为了让 $n-1$ 能够完整的传承下去，那么必须得让前面的数字的结果为 $n-1$，那么 $1,n-3,n-2$ 符合条件。</li>
</ul>
</li>
</ul>
<p><del>就是这道题，浪费了我1个多小时的时间，真憨了。</del></p>
<ul>
<li>最后的代码也是特别的短。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    if(n&amp;1)&#123;</span><br><span class="line">        cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">        FOR(i,1,n-4)cout&lt;&lt;i+1&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        cout&lt;&lt;1&lt;&lt;&#x27; &#x27;&lt;&lt;n-2&lt;&lt;&#x27; &#x27;&lt;&lt;n-1&lt;&lt;&#x27; &#x27;&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int t=log2(n);</span><br><span class="line">        </span><br><span class="line">        cout&lt;&lt;(int(pow(2,t+1))-1)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">        if((int)pow(2,t)==n)&#123;</span><br><span class="line">            FOR(i,1,n-5)cout&lt;&lt;i+1&lt;&lt;&#x27; &#x27;;</span><br><span class="line">            cout&lt;&lt;1&lt;&lt;&#x27; &#x27;&lt;&lt;n-3&lt;&lt;&#x27; &#x27;&lt;&lt;n-2&lt;&lt;&#x27; &#x27;&lt;&lt;n-1&lt;&lt;&#x27; &#x27;&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            FOR(i,1,(int)(pow(2,t)-2))cout&lt;&lt;i&lt;&lt;&#x27; &#x27;;</span><br><span class="line">            FOR(i,(int)pow(2,t),n-2)cout&lt;&lt;i&lt;&lt;&#x27; &#x27;;</span><br><span class="line">            cout&lt;&lt;n&lt;&lt;&#x27; &#x27;&lt;&lt;n-1&lt;&lt;&#x27; &#x27;&lt;&lt;(int)pow(2,t)-1&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>错误原因：没有认真考虑偶数的关系，偶数还有一种情况没有考虑到。</p>
</blockquote>
<h2 id="1932E-Final-Countdown-1600-贡献法-高精度"><a href="#1932E-Final-Countdown-1600-贡献法-高精度" class="headerlink" title="1932E-Final Countdown*1600 贡献法+高精度"></a>1932E-Final Countdown<strong>*1600</strong> 贡献法+高精度</h2><ul>
<li>思路特别简单，就是去算：比如123，答案就是123+12+1。</li>
<li>但这边得优化一下，就是按每一位来做，此时前缀和来做就可以了，前缀和是维护位数数字的和的。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;s;</span><br><span class="line">    </span><br><span class="line">    VI sum(n),C;</span><br><span class="line"></span><br><span class="line">    sum[0]=s[0]-&#x27;0&#x27;;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n-1)&#123;</span><br><span class="line">        sum[i]=sum[i-1]+s[i]-&#x27;0&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int t=0;</span><br><span class="line"></span><br><span class="line">    FORD(i,0,n-1)&#123;</span><br><span class="line">        t+=sum[i];</span><br><span class="line">        C.pb(t%10);</span><br><span class="line">        t/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    if(t)C.pb(t);</span><br><span class="line"></span><br><span class="line">    while(C.sz&gt;1&amp;&amp;C.back()==0)C.pop_back();</span><br><span class="line"></span><br><span class="line">    reverse(ALL(C));</span><br><span class="line"></span><br><span class="line">    for(auto x:C)cout&lt;&lt;x;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>错误次数：1</p>
<p>错误原因：没有对操作优化，单纯相加很耗时的。</p>
</blockquote>
<h2 id="1928C-Physical-Education-Lesson-1600-数学"><a href="#1928C-Physical-Education-Lesson-1600-数学" class="headerlink" title="1928C-Physical Education Lesson *1600 数学"></a>1928C-Physical Education Lesson <strong>*1600</strong> 数学</h2><ul>
<li><p>这道题可以很容易知道：题目的函数的周期 $T=2(k-1)$。</p>
</li>
<li><p>然后要求的是 $k$，然后可以知道求的东西是： <script type="math/tex">n\equiv x (\mod 2(k-1))</script></p>
</li>
<li><p>以及： <script type="math/tex">n\equiv 2k-x (\mod 2(k-1)) \iff n\equiv 2-x(\mod 2(k-1))</script></p>
</li>
<li><p>所以题目就转化成了求满足以上两个式子不同的 $k$ 的个数。</p>
</li>
<li><p><strong>特别知道：$a\equiv b(\mod x)$，求 $x$ 的个数，那么也就是求 $a-b|x$的个数，此时就转化成了求 $a-b$ 因子的个数</strong>。</p>
</li>
<li><p>注意：当 $x=k$ 的时候，会多算一次；因子必须是<strong>偶数</strong>，因为是 $2(k-1)$，这个数是偶数。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool check(int i,int b,int x)&#123;</span><br><span class="line">    int k=i/2+1;</span><br><span class="line">    if(!(i&amp;1)&amp;&amp;i&gt;=2&amp;&amp;(k&gt;=x)&amp;&amp;!(b!=x&amp;&amp;(k==x)))return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int calc(int a,int b,int x)&#123;</span><br><span class="line">    int p=a-b,res=0;</span><br><span class="line">    for(int i=1;i&lt;=p/i;i++)&#123;</span><br><span class="line">        if(p%i==0)&#123;</span><br><span class="line">            if(check(i,b,x))res++;</span><br><span class="line">            if(i!=p/i)&#123;</span><br><span class="line">                if(check(p/i,b,x))res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    int res=calc(n,x,x);</span><br><span class="line">    if(x!=1)res+=calc(n,2-x,x);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：卡在黑体部分内容。</p>
</blockquote>
<h2 id="510C-Fox-And-Names-1600-拓扑序"><a href="#510C-Fox-And-Names-1600-拓扑序" class="headerlink" title="510C-Fox And Names *1600 拓扑序"></a>510C-Fox And Names <strong>*1600</strong> 拓扑序</h2><ul>
<li>又是一道把字母转化到图的题目。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cin&gt;&gt;s[i];</span><br><span class="line"></span><br><span class="line">    string s2=s[1],s1;</span><br><span class="line"></span><br><span class="line">    VII g(300);</span><br><span class="line">    VI din(300,0),ans;</span><br><span class="line"></span><br><span class="line">    FOR(i,2,n)&#123;</span><br><span class="line">        s1=s[i];</span><br><span class="line"></span><br><span class="line">        int a=0;</span><br><span class="line">        </span><br><span class="line">        int m=min&lt;int&gt;(s1.sz,s2.sz);</span><br><span class="line"></span><br><span class="line">        FOR(j,1,m)&#123;</span><br><span class="line">            if(s1[a]!=s2[a])&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(a&gt;=m&amp;&amp;s2.sz&gt;s1.sz)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;Impossible&quot;&lt;&lt;endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // cout&lt;&lt;s2[a]&lt;&lt;&#x27; &#x27;&lt;&lt;s1[a]&lt;&lt;endl;</span><br><span class="line">        if(s2[a]&gt;=&#x27;a&#x27;)&#123;</span><br><span class="line">            g[s2[a]].emplace_back(s1[a]);</span><br><span class="line">            din[s1[a]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        s2=s1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue&lt;int&gt;q;</span><br><span class="line"></span><br><span class="line">    FOR(i,&#x27;a&#x27;,&#x27;z&#x27;)&#123;</span><br><span class="line">        if(!din[i])q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(q.sz)&#123;</span><br><span class="line">        int t=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        ans.pb(t);</span><br><span class="line">        for(auto x:g[t])&#123;</span><br><span class="line">            --din[x];</span><br><span class="line">            if((din[x])==0)&#123;</span><br><span class="line">                q.push(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(ans.sz&lt;26)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;Impossible&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        for(auto x:ans)cout&lt;&lt;char(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：对于很多字符的题目要找什么关系的时候，往往会转化到图<del>（还记得ICPC杭州区域赛A题用的也是字符串的关系建图）</del></p>
</blockquote>
<h2 id="Maximum-AND-1800-位运算"><a href="#Maximum-AND-1800-位运算" class="headerlink" title="Maximum AND *1800 位运算"></a>Maximum AND <strong>*1800</strong> 位运算</h2><p><del>不得不说位运算的挺有意思的，出题人总有很特殊的角度进行考察。</del></p>
<ul>
<li>$b$ 数组是可以任意排序的。</li>
<li>因为是先异或再与的，可以发现：要让最后的结果最大，那肯定对于每一位来说都要有 $1$ 是最好的。</li>
<li>可以发现：$0 \^\ 1 =1$，那么可以知道 $a$ 数组的 $0$ 的个数是可以跟 $b$ 数组的 $1$ 数组是相等的（前提是在第 $i$ 位的情况下），反过来也相等。</li>
<li>那么也就是说匹配是相同的。</li>
<li>此时就可以先枚每一位，如果答案的这一位要是 $1$ 的情况下，那么必须让 $a$ 数组和 $b$ 数组的匹配是相同的。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool check(int t)&#123;</span><br><span class="line">    VI x,y;</span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        x.pb(a[i]&amp;t);</span><br><span class="line">        y.pb((b[i]&amp;t)^t);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(ALL(x));</span><br><span class="line">    sort(ALL(y));</span><br><span class="line">    return x==y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cin&gt;&gt;a[i];</span><br><span class="line">    FOR(i,1,n)cin&gt;&gt;b[i];</span><br><span class="line"></span><br><span class="line">    int ans=0;</span><br><span class="line"></span><br><span class="line">    FORD(i,0,30)&#123;</span><br><span class="line">        if(check(ans|(1ll&lt;&lt;i)))&#123;</span><br><span class="line">            ans|=(1&lt;&lt;i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>错误原因：没有想到每一位的匹配是相同的。</p>
</blockquote>
<h1 id="2-8-专题速练-水题乱刷"><a href="#2-8-专题速练-水题乱刷" class="headerlink" title="2.8 专题速练+水题乱刷"></a>2.8 专题速练+水题乱刷</h1><p><del>今天特别冷，我靠，手放在键盘上一种冻僵的感觉很难受，所以今天的做题体验是特别的差，但今天算下来我也收获了挺多。</del></p>
<p><del>后面决定启动仪式的时候得做几道水题，要不然没有状态。</del></p>
<h2 id="1920C-Partitioning-the-Array-1600-数学"><a href="#1920C-Partitioning-the-Array-1600-数学" class="headerlink" title="1920C-Partitioning the Array *1600 数学"></a>1920C-Partitioning the Array <strong>*1600</strong> 数学</h2><ul>
<li>要分成 $k$ 份，那么 $k$ 必须是 $n$ 的因数。</li>
<li>要让每个组的数相同，那么也就是让 $a<em>i \equiv a</em>{i+k}(\mod m)$，那么算这个之前做过类似的，就是变成： $a<em>i -a</em>{i+k}\equiv 0(\mod m)$，也就是 $|a<em>i-a</em>{i+k}|$ 能被 $m$ 整除，那么 $m$ 也就是它的因数。</li>
<li>要求 $m$ 的个数也就是求 $|a<em>i-a</em>{i+k}|$ 的最小公倍数。</li>
<li><p>如果最小公倍数等于 $1$ 则不满足条件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool check(int x)&#123;</span><br><span class="line">    int t=0;</span><br><span class="line">    FOR(i,x+1,n)&#123;</span><br><span class="line">        t=__gcd(t,abs(w[i]-w[i-x]));</span><br><span class="line">        if(t==1)return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    int res=0;</span><br><span class="line"></span><br><span class="line">    for(int i=1;i&lt;=n/i;i++)&#123;</span><br><span class="line">        if(n%i==0)&#123;</span><br><span class="line">            if(check(i))res++;</span><br><span class="line">            if(i!=n/i&amp;&amp;check(n/i))res++;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>最关键的是得考虑多个数都能被 $x$ 整除，那么 $x$ 是它们的最小公倍数。</p>
</blockquote>
<h2 id="1899F-Alex’s-whims-1600-思维-构造"><a href="#1899F-Alex’s-whims-1600-思维-构造" class="headerlink" title="1899F-Alex’s whims *1600 思维+构造"></a>1899F-Alex’s whims <strong>*1600</strong> 思维+构造</h2><ul>
<li>这就是骗分题，直接让树是一条链，此时的边长是 $n-1$。</li>
<li>然后如果 $d\&lt;n-1$，此时就断开 $(n,n-1)$，连接 $(n,d)$<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n-1)cout&lt;&lt;i&lt;&lt;&#x27; &#x27;&lt;&lt;i+1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    int t=n-1;</span><br><span class="line"></span><br><span class="line">    while(m--)&#123;</span><br><span class="line">        int d;</span><br><span class="line">        cin&gt;&gt;d;</span><br><span class="line">        if(d==t)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;-1 -1 -1&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            cout&lt;&lt;n&lt;&lt;&#x27; &#x27;&lt;&lt;t&lt;&lt;&#x27; &#x27;&lt;&lt;d&lt;&lt;endl;</span><br><span class="line">            t=d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>最关键的就是能想到是一条链，然后在链条上修修补补就可以了。因此对于构造题，可以想象特殊情况是什么，这样就能更好的构造了。（<del>千万不要被难度吓到，其实有的难度是虚高的</del>）</p>
</blockquote>
<h2 id="1801A-The-Very-Beautiful-Blanket-1600-构造"><a href="#1801A-The-Very-Beautiful-Blanket-1600-构造" class="headerlink" title="1801A-The Very Beautiful Blanket *1600 构造"></a>1801A-The Very Beautiful Blanket <strong>*1600</strong> 构造</h2><ul>
<li>嘿嘿，我直接看样例发现这样构造可以满足：</li>
</ul>
<script type="math/tex; mode=display">0\ 1 \ 4\ 5</script><script type="math/tex; mode=display">2\ 3 \ 6 \ 7</script><script type="math/tex; mode=display">512 \ 513 \ 516 \ 517</script><script type="math/tex; mode=display">514 \ 515 \ 518 \ 518</script><ul>
<li>这个也很容易证明：$a\oplus a+1 \oplus a+2 \oplus a+3 =0$（<del>这个非常重要，很多时候都会用到</del>）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;n*m&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    w[1][1]=0,w[1][2]=1,w[2][1]=2,w[2][2]=3;</span><br><span class="line"></span><br><span class="line">    FOR2(i,3,n)&#123;</span><br><span class="line">        w[i][1]=w[i-2][1]+512,w[i][2]=w[i-2][2]+512;</span><br><span class="line">        w[i+1][1]=w[i-1][1]+512,w[i+1][2]=w[i-1][2]+512;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR2(j,3,m)&#123;</span><br><span class="line">        FOR(i,1,n)&#123;</span><br><span class="line">            w[i][j]=w[i][j-2]+4;</span><br><span class="line">            w[i][j+1]=w[i][j-1]+4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        FOR(j,1,m)&#123;</span><br><span class="line">            cout&lt;&lt;w[i][j]&lt;&lt;&#x27; &#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>构造题哈哈哈。</p>
</blockquote>
<h2 id="1707A-Doremy’s-IQ-1600-贪心-正难则反思想"><a href="#1707A-Doremy’s-IQ-1600-贪心-正难则反思想" class="headerlink" title="1707A-Doremy’s IQ *1600 贪心+正难则反思想"></a>1707A-Doremy’s IQ <strong>*1600</strong> 贪心+正难则反思想</h2><ul>
<li>这道题一上来其实可以知道对于每个物品有 <strong>选</strong> 和 <strong>不选</strong> 两种情况，对于这种情况，通常的方法有：<code>dfs</code> ，<code>01背包</code>，<code>贪心</code>。</li>
<li>发现数据规模大，因此选择贪心。</li>
<li>如果选择正向贪心的话，可以发现后效性非常严重，根本不确定某个比赛到底要不要选，因此考虑反向贪心。</li>
<li>可以无脑先选最后一个，然后往前推，直到智商增加到了 $k$。</li>
</ul>
<blockquote>
<p>Q：那为什么这样贪心能保证没有后效性呢？</p>
<p>A：1. 反向能使得智商没有得到浪费。</p>
<ol>
<li><p>能使得智商不减的操作（见代码的注释 <code>//</code> 处）变得更多。</p>
</li>
<li><p>如果正着来的话起点的选择是多样的。</p>
</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cin&gt;&gt;w[i];</span><br><span class="line">    </span><br><span class="line">    int k=0;</span><br><span class="line">    string ans;</span><br><span class="line">    ans.resize(n+1);</span><br><span class="line">    </span><br><span class="line">    FORD(i,1,n)&#123;</span><br><span class="line">        if(k&gt;=w[i])ans[i]=&#x27;1&#x27;;//这个会更多</span><br><span class="line">        else if(k&lt;q)ans[i]=&#x27;1&#x27;,k++;</span><br><span class="line">        else if(k&gt;q)break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cout&lt;&lt;(ans[i]?1:0);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1137B-Camp-Schedule-1600-KMP"><a href="#1137B-Camp-Schedule-1600-KMP" class="headerlink" title="1137B-Camp Schedule *1600 KMP"></a>1137B-Camp Schedule <strong>*1600</strong> KMP</h2><ul>
<li>如果纯纯贪心得考虑一种情况 <code>10101</code>，这个是被算作两次的 <code>101</code>。</li>
<li>如果单纯贪心的话这种情况是考虑不到的。</li>
<li>因此就得用 kMP 的 <code>next</code> 数组了。</li>
<li>此时如果匹配到了 <code>101</code>，那么就用 <code>next</code> 数组，此时 <code>next=1</code>，这样就不会出现输出结果为：<code>101101</code> 了。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    scanf(&quot;%s %s&quot;,a+1,b+1);</span><br><span class="line"></span><br><span class="line">    n=strlen(a+1),m=strlen(b+1);</span><br><span class="line"></span><br><span class="line">    int j=0;</span><br><span class="line">    FOR(i,2,m)&#123;</span><br><span class="line">        while(j&amp;&amp;b[j+1]!=b[i])j=ne[j];</span><br><span class="line">        if(b[j+1]==b[i])j++;</span><br><span class="line">        ne[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cnt[a[i]]++;</span><br><span class="line"></span><br><span class="line">    int t=1;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        if(cnt[b[t]])ans[i]=b[t],cnt[ans[i]]--;</span><br><span class="line">        else ans[i]=(b[t]^1),cnt[ans[i]]--;</span><br><span class="line">        if(t==m)t=ne[t];</span><br><span class="line">        t++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cout&lt;&lt;ans[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>错误原因：没有想到 KMP 还可以这样被应用，<code>next</code> 数组用法。</p>
</blockquote>
<h2 id="346C-Lucky-Common-Subsequence-2000-dp-KMP"><a href="#346C-Lucky-Common-Subsequence-2000-dp-KMP" class="headerlink" title="346C-Lucky Common Subsequence *2000 dp+KMP"></a>346C-Lucky Common Subsequence <strong>*2000</strong> dp+KMP</h2><ul>
<li>如果没有 $virus$ 数组的话，那么这道题就是很典型的 <code>LCS</code> 的题目，dp 方程也就很好写了：<code>f[i][j]</code> 表示 $s_1$ 前 $i$ 个字符和 $s_2$ 前 $j$ 个字符能匹配的最长公共子序列，转移也就很好写了。</li>
<li>这道题多一个匹配，匹配就得请 KMP 出场了，此时 <code>f[i][j][k]</code> 表示：设当第一个串匹配到 $i$ 位，第二个串匹配到 $j$ 位时，能匹配到第三个串的 $k$ 位的最长公共子序列的方案。</li>
<li>状态转移方程：</li>
<li>$f<em>{i,j,t}=max{f</em>{i,j,t},f<em>{i-1,j-1,k}+s_1{_i}}f</em>{i,j,k}=max{f<em>{i-1,j,k},f</em>{i,j-1,k},f_{i,j,k}}$</li>
<li>这里特别要注意一下范围，范围是 $[0,virus.size()-1]$，为什么呢？因为可以不匹配也可以最多匹配到最后一个字母的前一个字母。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string max(string a,string b)&#123;</span><br><span class="line">    if(a.sz&gt;b.sz)&#123;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3;</span><br><span class="line">    </span><br><span class="line">    la=s1.sz,lb=s2.sz,lc=s3.sz;</span><br><span class="line">    s1=&#x27; &#x27;+s1,s2=&#x27; &#x27;+s2,s3=&#x27; &#x27;+s3;</span><br><span class="line"></span><br><span class="line">    if(la&gt;lb)&#123;</span><br><span class="line">        swap(la,lb);</span><br><span class="line">        swap(s1,s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int j=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,2,lc)&#123;</span><br><span class="line">        while(j&amp;&amp;s3[j+1]!=s3[i])j=ne[j];</span><br><span class="line">        if(s3[j+1]==s3[i])j++;</span><br><span class="line">        ne[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,la)&#123;</span><br><span class="line">        FOR(j,1,lb)&#123;</span><br><span class="line">            FOR(k,0,lc-1)&#123;</span><br><span class="line">                if(s1[i]==s2[j])&#123;</span><br><span class="line">                    int t=k;</span><br><span class="line">                    while(t&gt;0&amp;&amp;s1[i]!=s3[t+1])&#123;</span><br><span class="line">                        t=ne[t];</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(s1[i]==s3[t+1])t++;</span><br><span class="line">                    f[i][j][t]=max(f[i][j][t],f[i-1][j-1][k]+s1[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                f[i][j][k]=max(f[i][j][k],f[i-1][j][k]);</span><br><span class="line">                f[i][j][k]=max(f[i][j][k],f[i][j-1][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string ans;</span><br><span class="line"></span><br><span class="line">    FOR(i,0,lc-1)&#123;</span><br><span class="line">        if(f[la][lb][i].sz&gt;=ans.sz)&#123;</span><br><span class="line">            ans=f[la][lb][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(ans.sz==0)&#123;</span><br><span class="line">        cout&lt;&lt;0&lt;&lt;endl;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        cout&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类似这种匹配的还是得把 KMP 放在考虑的范围上。</p>
</blockquote>
<h2 id="59E-Shortest-Path-2000-最短路-hash-路径记录"><a href="#59E-Shortest-Path-2000-最短路-hash-路径记录" class="headerlink" title="59E-Shortest Path *2000 最短路+hash+路径记录"></a>59E-Shortest Path <strong>*2000</strong> 最短路+hash+路径记录</h2><ul>
<li>就是一个最短路，因为边权为 $1$，直接用 <code>bfs</code> 做。</li>
<li>还有就是得记录路径（<strong>这部分是难点</strong>）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,m)&#123;</span><br><span class="line">        int a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        g[a].emplace_back(b);</span><br><span class="line">        g[b].emplace_back(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,k)&#123;</span><br><span class="line">        int a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        S.insert(&#123;a,b,c&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PII ans=&#123;-1,-1&#125;;</span><br><span class="line"></span><br><span class="line">    queue&lt;array&lt;int,2&gt;&gt;q;</span><br><span class="line"></span><br><span class="line">    q.push(&#123;1,1&#125;);</span><br><span class="line"></span><br><span class="line">    while(q.sz)&#123;</span><br><span class="line">        auto [u,v]=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line"></span><br><span class="line">        if(v==n)&#123;</span><br><span class="line">            ans=&#123;u,v&#125;;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(auto j:g[v])&#123;</span><br><span class="line">            if(S.count(&#123;u,v,j&#125;)||p[v][j])continue;</span><br><span class="line">            p[v][j]=u;</span><br><span class="line">            q.push(&#123;v,j&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(ans.fi==-1)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    VI res;</span><br><span class="line"></span><br><span class="line">    while(ans.se!=1)&#123;</span><br><span class="line">        res.push_back(ans.se);</span><br><span class="line">        ans=&#123;p[ans.fi][ans.se],ans.fi&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res.sz&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    res.push_back(1);</span><br><span class="line">    reverse(ALL(res));</span><br><span class="line"></span><br><span class="line">    for(auto x:res)cout&lt;&lt;x&lt;&lt;&#x27; &#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最关键是路径记录。</p>
</blockquote>
<h2 id="653E-Bear-and-Forgotten-Tree-2-2400-bfs-思维"><a href="#653E-Bear-and-Forgotten-Tree-2-2400-bfs-思维" class="headerlink" title="653E- Bear and Forgotten Tree 2 *2400 bfs+思维"></a>653E- Bear and Forgotten Tree 2 <strong>*2400</strong> bfs+思维</h2><ul>
<li>不满足条件的特判很好写，略。</li>
<li>此时把 $1$ 去掉，看其它的点相互连边（排除掉禁止连边的边），如果其他点相互连接的产生的连通块比 $k$ 大，此时就说明 $1$ 就得向这些连通块连超过 $k$ 条边的边。</li>
<li>这里用 <code>bfs</code> 去算连通块，这里偷个懒，直接用 <code>set</code> 把所有的点加进去，如果在一个连通块内，就把这些点全部删掉，如果删掉剩下的点跟 $1$ 有边相连，说明这个连通块是靠近 $1$ 相邻点，此时这个点就不能被 $1$ 访问到，此时就不是一棵树了。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void bfs(int u)&#123;</span><br><span class="line">    queue&lt;int&gt;q;</span><br><span class="line">    VI t;</span><br><span class="line">    q.push(u);</span><br><span class="line">    while(q.size())&#123;</span><br><span class="line">        int v=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        for(auto j:S)&#123;</span><br><span class="line">            if(!g[v].count(j))&#123;</span><br><span class="line">                t.pb(j);</span><br><span class="line">                q.push(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while(t.sz)S.erase(t.back()),t.pop_back();</span><br><span class="line">        if(!g[v].count(1))f=false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    int d=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,m)&#123;</span><br><span class="line">        int a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        g[a][b]=1;</span><br><span class="line">        g[b][a]=1;</span><br><span class="line">        if(a==1||b==1)d++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(n-d-1&lt;k)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;impossible&quot;&lt;&lt;endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,2,n)&#123;</span><br><span class="line">        S.insert(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int cnt=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,2,n)&#123;</span><br><span class="line">        if(S.count(i))&#123;</span><br><span class="line">            S.erase(i);</span><br><span class="line">            f=1;</span><br><span class="line">            bfs(i);</span><br><span class="line">            cnt++;</span><br><span class="line">            if(f)&#123;</span><br><span class="line">                cout&lt;&lt;&quot;impossible&quot;&lt;&lt;endl;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(cnt&lt;=k)cout&lt;&lt;&quot;possible&quot;&lt;&lt;endl;</span><br><span class="line">    else cout&lt;&lt;&quot;impossible&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>典型的连通块问题，可以用 <code>bfs</code> 、 并查集 、<code>targin</code> 等来做。</p>
</blockquote>
<h2 id="1923A-Moving-Chips"><a href="#1923A-Moving-Chips" class="headerlink" title="1923A-Moving Chips"></a>1923A-Moving Chips</h2><ul>
<li>水题：就是简单统计 $1$ 直接 $0$ 的个数。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        cin&gt;&gt;w[i];</span><br><span class="line">        s[i]=s[i-1]+(w[i]==0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int l=0,r=n;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        if(w[i]==1)&#123;</span><br><span class="line">            l=i;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FORD(i,1,n)&#123;</span><br><span class="line">        if(w[i]==1)&#123;</span><br><span class="line">            r=i;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;s[r]-s[l-1]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="1879A-Rigged"><a href="#1879A-Rigged" class="headerlink" title="1879A-Rigged!"></a>1879A-Rigged!</h2><ul>
<li>水题，直接让答案等于第一个数的第一个数。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cin&gt;&gt;w[i].fi&gt;&gt;w[i].se;</span><br><span class="line"></span><br><span class="line">    int ans=1e18;</span><br><span class="line"></span><br><span class="line">    FOR(i,2,n)&#123;</span><br><span class="line">        if(w[i].se&gt;=w[1].se&amp;&amp;w[i].fi&gt;=w[1].fi)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;w[1].fi&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Fire-Again-1500-多路bfs"><a href="#Fire-Again-1500-多路bfs" class="headerlink" title="Fire Again *1500 多路bfs"></a>Fire Again <strong>*1500</strong> 多路bfs</h2><ul>
<li>很好写的，本题最坑的就是得用 <code>freopen(&quot;&quot;,&quot;&quot;,stdin/stdout)</code>，因为在文件。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);</span><br><span class="line">    freopen(&quot;output.txt&quot;,&quot;w&quot;,stdout);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">    </span><br><span class="line">    queue&lt;array&lt;int,3&gt;&gt;q;</span><br><span class="line">    </span><br><span class="line">    FOR(i,1,k)&#123;</span><br><span class="line">        int x,y;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        vis[x][y]=1;</span><br><span class="line">        q.push(&#123;x,y,0&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        FOR(j,1,m)&#123;</span><br><span class="line">            w[i][j]=1e9;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(q.sz)&#123;</span><br><span class="line">        auto [x,y,step]=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        w[x][y]=min(w[x][y],step);</span><br><span class="line">        FOR(i,0,3)&#123;</span><br><span class="line">            int a=dx[i]+x,b=dy[i]+y;</span><br><span class="line">            if(a&lt;1||b&lt;1||a&gt;n||b&gt;m||vis[a][b])continue;</span><br><span class="line">            vis[a][b]=1;</span><br><span class="line">            q.push(&#123;a,b,step+1&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int t=0;</span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        FOR(j,1,m)&#123;</span><br><span class="line">            t=max(t,w[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        FOR(j,1,m)&#123;</span><br><span class="line">            if(t==w[i][j])&#123;</span><br><span class="line">                cout&lt;&lt;i&lt;&lt;&#x27; &#x27;&lt;&lt;j&lt;&lt;endl;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有的不是标准输入输出，就得用 <code>freopen</code>。</p>
</blockquote>
<h2 id="Gym-100866A-Anti-factorial-高精度-小技巧"><a href="#Gym-100866A-Anti-factorial-高精度-小技巧" class="headerlink" title="Gym-100866A-Anti factorial 高精度/小技巧"></a>Gym-100866A-Anti factorial 高精度/小技巧</h2><ul>
<li>哈哈哈，其实不用高精度也可以做，可以：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line"></span><br><span class="line">    int t=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,0,s.sz-1)&#123;</span><br><span class="line">        t=(t*10+s[i]-&#x27;0&#x27;)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    fac[0]=1;</span><br><span class="line">    FOR(i,1,255)&#123;</span><br><span class="line">        fac[i]=fac[i-1]*i%mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,255)&#123;</span><br><span class="line">        if(t==fac[i])&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>高精度做法：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void solbve()&#123;</span><br><span class="line">    VI p;</span><br><span class="line">    p.pb(1);</span><br><span class="line">    VI pd;</span><br><span class="line">    for(auto x:s)&#123;</span><br><span class="line">        pd.push_back(x-&#x27;0&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,255)&#123;</span><br><span class="line">        int t=0;</span><br><span class="line">        VI c;</span><br><span class="line">        for(int j=0;j&lt;p.sz||t;j++)&#123;</span><br><span class="line">            if(j&lt;p.sz)t+=p[j]*i;</span><br><span class="line">            c.pb(t%10);</span><br><span class="line">            t/=10;</span><br><span class="line">        &#125;</span><br><span class="line">        p=c;</span><br><span class="line">        reverse(ALL(c));</span><br><span class="line">        if(c==pd)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="1735D-Meta-set-1700-思维"><a href="#1735D-Meta-set-1700-思维" class="headerlink" title="1735D-Meta-set *1700 思维"></a>1735D-Meta-set <strong>*1700</strong> 思维</h2><ul>
<li><p>可以很容易发现，对于 <script type="math/tex">a:\ 0 \ 1 \ 2</script> <script type="math/tex">b:\ 0 \ 2 \ 1</script></p>
</li>
<li><p>那么 $c$ 串也就可以很容易判断出来是 $0 \ 0 \ 0$。</p>
</li>
<li><p>题目说只要 $&gt;1$ 个满足这样的，就可以认为是符合条件的。</p>
</li>
<li><p>因为 $n\le 10^3$ ，所以可以直接先枚举其中的两个，由于这些数字最大也就 $2$，因此可以想到三进制，由于要定位第三个串，所以必须要让每个串能被十进制数表示，因此就得用三进制来维护。</p>
</li>
<li><p>那么为了使该五元集合法，五元集中必须能提取出至少两个的合法三元集。我们之前已经求出 $sum$ 数组，记录含有 $i$ 串的合法三元集的个数。于是当前第 $i$ 串对结果的贡献就是 $C_{sum_i}^2$。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int calc(int x,int y)&#123;</span><br><span class="line">    int res=0;</span><br><span class="line">    for(int i=1,t=1;i&lt;=m;i++,t*=3)&#123;</span><br><span class="line">        if(w[x][i]==w[y][i])&#123;</span><br><span class="line">            res+=w[x][i]*t;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            res+=(3-w[x][i]-w[y][i])*t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        int t=1,s=0;</span><br><span class="line">        FOR(j,1,m)&#123;</span><br><span class="line">            cin&gt;&gt;w[i][j];</span><br><span class="line">            a[i]+=w[i][j]*t;</span><br><span class="line">            t*=3;</span><br><span class="line">        &#125;</span><br><span class="line">        mp[a[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n-2)&#123;</span><br><span class="line">        FOR(j,i+1,n-1)&#123;</span><br><span class="line">            int t=calc(i,j);</span><br><span class="line">            if(mp[t]&gt;j)&#123;</span><br><span class="line">                sum[i]++;</span><br><span class="line">                sum[j]++;</span><br><span class="line">                sum[mp[t]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int ans=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)&#123;</span><br><span class="line">        ans+=sum[i]*(sum[i]-1)/2;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数字不大，要定位第三个的话，可以考虑进制。</p>
</blockquote>
<h2 id="803D-Magazine-A-1900-二分"><a href="#803D-Magazine-A-1900-二分" class="headerlink" title="803D-Magazine A *1900 二分"></a>803D-Magazine A <strong>*1900</strong> 二分</h2><ul>
<li>这道题就是直接二分答案就可以了，如果遇到 <code>-</code> 或 ``的话，考虑换行，然后贪心就可以了。</li>
<li>题目具有单调性，二分生效。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool check(int x)&#123;</span><br><span class="line">    int c1=1,c2=0,c3=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,0,s.sz-1)&#123;</span><br><span class="line">        if(s[i]==&#x27; &#x27;||s[i]==&#x27;-&#x27;)c3=i;</span><br><span class="line">        c2++;</span><br><span class="line">        if(c2&gt;=x&amp;&amp;i!=s.sz-1)&#123;</span><br><span class="line">            if(!c3)return false;</span><br><span class="line">            c1++;</span><br><span class="line">            c2=i-c3;</span><br><span class="line">            c3=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return c1&lt;=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    int mx=0;</span><br><span class="line">    </span><br><span class="line">    cin.ignore();</span><br><span class="line">    getline(cin,s);</span><br><span class="line"></span><br><span class="line">    int l=0,r=1e12;</span><br><span class="line"></span><br><span class="line">    while(l+1!=r)&#123;</span><br><span class="line">        int mid=l+r&gt;&gt;1;</span><br><span class="line">        if(check(mid))r=mid;</span><br><span class="line">        else l=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="883I-Photo-Processing-1900-二分-dp"><a href="#883I-Photo-Processing-1900-二分-dp" class="headerlink" title="883I-Photo Processing *1900 二分+dp"></a>883I-Photo Processing <strong>*1900</strong> 二分+dp</h2><ul>
<li>题目说了<strong>最大值最小</strong>，所以就是二分没错了。</li>
<li>然后现在是二分，此时也就是给定了答案，如果贪心去分配的话，感觉是有后效性的，因此就得用 <code>dp</code> 去做。</li>
<li>因为题目只要求分组，不需要具体方案，可以将输入的数排序，然后定义一个 $f_i$ 存的是前 $i$ 个数能满足条件的最后一个数的位置，那么只需判断 <code>f[n]</code> 是否等于 $n$。</li>
<li>转移：从前往后枚举，因为要求每组至少 $m$ 个数，对于当前的第 $i$ 个数，要使每个数都明确得分到一个组，看 <code>f[i−m]</code> 存的前一位，即没分到组的第一个数，如果 <code>a[i]−a[t+1]</code> 小于 <code>mid</code> 则可以分为一组更新 <code>f[i]=i</code>。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool check(int x)&#123;</span><br><span class="line">    VI f(n+1,0);</span><br><span class="line"></span><br><span class="line">    int pos=0;</span><br><span class="line"></span><br><span class="line">    FOR(i,m,n)&#123;</span><br><span class="line">        int t=f[i-m];</span><br><span class="line">        if(w[i]-w[t+1]&lt;=x)pos=i;</span><br><span class="line">        f[i]=pos;</span><br><span class="line">    &#125;</span><br><span class="line">    return f[n]==n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    FOR(i,1,n)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    sort(w+1,w+1+n);</span><br><span class="line"></span><br><span class="line">    int l=-1,r=w[n]-w[1]+1;</span><br><span class="line"></span><br><span class="line">    while(l+1!=r)&#123;</span><br><span class="line">        int mid=l+r&gt;&gt;1;</span><br><span class="line">        if(check(mid))r=mid;</span><br><span class="line">        else l=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    if(check(l))r=l;</span><br><span class="line">    cout&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>到这里一天又结束了，感慨时间过得真快，我花了 $2$ 小时也终于写到了这里。</p>
<hr>
<h1 id="2-9-2-14-26"><a href="#2-9-2-14-26" class="headerlink" title="2.9-2.14  26"></a>2.9-2.14  <sup>26</sup></h1><p><del>期间发生了许多事情，其中有 $3$ 天时间把这个刷题给搁置了，因为流感是真的严重，在修养身体。</del></p>
<p>2.14统一更新：</p>
<h2 id="706B-Interesting-drink-1100"><a href="#706B-Interesting-drink-1100" class="headerlink" title="706B-Interesting drink *1100"></a>706B-Interesting drink <strong>*1100</strong></h2><ul>
<li>没什么说的，二分的水题。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(w<span class="number">+1</span>,w<span class="number">+1</span>+n);</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">upper_bound</span>(w<span class="number">+1</span>,w<span class="number">+1</span>+n,x)-w<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1198B-Welfare-State-1600-思维-值得重构"><a href="#1198B-Welfare-State-1600-思维-值得重构" class="headerlink" title="1198B-Welfare State *1600 思维 值得重构"></a>1198B-Welfare State <strong>*1600</strong> 思维 值得重构</h2><ul>
<li><p>看题目，有单点修改和区间修改以及查询，因此很容易可以想到线段树。</p>
</li>
<li><p>但我们可以仔细考虑一下，发现有的操作是无用的，这样的思维就可以让我们离线处理查询。</p>
</li>
<li><p>比如补平均以下的 $2$，然后我此时的值是 $5$，那么此时这种操作就失效了。</p>
</li>
<li><p>还有一个性质就是：数字单调不降，除修改外。</p>
</li>
<li><p>综合以上性质，可以很容易写出：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin&gt;&gt;w[i].fi;</span><br><span class="line">        w[i].se=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;Q;</span><br><span class="line">    q[<span class="number">0</span>]=<span class="number">-1e18</span>;</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">        <span class="type">int</span> opt,p,x;</span><br><span class="line">        cin&gt;&gt;opt;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">            cin&gt;&gt;p&gt;&gt;x;</span><br><span class="line">            w[p]=&#123;x,i&#125;;</span><br><span class="line">            q[i]=<span class="number">-1e18</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            q[i]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mx=<span class="number">-1e18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FORD</span>(i,<span class="number">0</span>,Q)&#123;</span><br><span class="line">        mx=<span class="built_in">max</span>(mx,q[i]);</span><br><span class="line">        pre[i]=mx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">max</span>(pre[w[i].se],w[i].fi)&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>线段树做法更容易。</p>
<p>反思：本来有这种离线处理的思想，但总是往排序那边想了，可能是被分块的题目误导了，分块的题目经常要把查询进行排序。<br>这道题其实只需要倒叙来做就可以了，倒叙维护最大值。</p>
</blockquote>
<h2 id="1239A-Ivan-the-Fool-and-the-Probability-Theory-1700-找规律"><a href="#1239A-Ivan-the-Fool-and-the-Probability-Theory-1700-找规律" class="headerlink" title="1239A-Ivan the Fool and the Probability Theory *1700 找规律"></a>1239A-Ivan the Fool and the Probability Theory <strong>*1700</strong> 找规律</h2><ul>
<li><p>如果只有一行的情况，如果是 $1\times1$ ，答案为 $2$，如果是 $1\times 2$ ，答案为 $4$。</p>
</li>
<li><p>那么可以很容易发现如果是 $1\times n$ 的情况，答案就是斐波那契数列的 $2f<em>1+2f</em>{n}-2$。</p>
</li>
<li><p>至于证明，<del>其实不太会</del>。</p>
</li>
<li><p>简略证明为什么是斐波那契数列：</p>
</li>
</ul>
<p>令 $f<em>{i,0}$ 为第 $i$ 行涂黑色的方案数， $f</em>{i,1}$ 为第 $i$ 行涂白色的方案数。</p>
<p>由于同一个颜色的最多只能有 $1$ 个相邻，那么看前面几行可以得出：</p>
<script type="math/tex; mode=display">f_{i,0}=f_{i-1,0}+f_{i-2,0}</script><script type="math/tex; mode=display">f_{i,1}=f_{i-1,1}+f_{i-2,1}</script><p>所以：</p>
<script type="math/tex; mode=display">f_{i}=f_{i-1}+f_{i-2}</script><p>证明完毕。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>]=f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">2</span>,<span class="built_in">max</span>(n,m)<span class="number">+2</span>)&#123;</span><br><span class="line">        f[i]=(f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">2</span>*(f[n]+f[m]<span class="number">-1</span>)%mod&lt;&lt;endl;<span class="comment">//-1就是同色相邻的情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果出什么求方案数，它很有可能是排列组合或者通过找规律来得出结论的。</p>
</blockquote>
<h2 id="1364C-Ehab-and-Prefix-MEXs-1600-构造题"><a href="#1364C-Ehab-and-Prefix-MEXs-1600-构造题" class="headerlink" title="1364C-Ehab and Prefix MEXs *1600 构造题"></a>1364C-Ehab and Prefix MEXs <strong>*1600</strong> 构造题</h2><ul>
<li><p>这是一道 $mex$ 的题目，mex的性质有单调不降，然后当 $w_i \le i$，其中 $w_i$ 指的是当前 mex 值。</p>
</li>
<li><p>特判很容易，关键是构造，这里直接采用如果 $w<em>i=w</em>{i-1}$，此时就找下一个的下一个（不是下一个的最小的下一个），这里的原始答案默认按照 $0,1,…,n-1$ 的方式来。</p>
</li>
<li><p>如果 $w<em>i\not= w</em>{i-1}$ ，那么就取 $w_{i-1}$，可以很容易证明这样一定是最优的。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[i]&gt;i)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        vis[w[i]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(w[<span class="number">1</span>]==<span class="number">1</span>)vis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[i]==w[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">while</span>(p&lt;=n<span class="number">+1</span>&amp;&amp;vis[p])p++;</span><br><span class="line">            vis[p]=<span class="number">1</span>;</span><br><span class="line">            cout&lt;&lt;p&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;w[i<span class="number">-1</span>]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>mex的性质得多掌握，mex如果是连续的情况下，往往跟上一个mex的差值是1。</p>
</blockquote>
<h2 id="1514C-Product-1-Modulo-N-1600-构造-数学"><a href="#1514C-Product-1-Modulo-N-1600-构造-数学" class="headerlink" title="1514C-Product 1 Modulo N *1600 构造+数学"></a>1514C-Product 1 Modulo N <strong>*1600</strong> 构造+数学</h2><ul>
<li><p>设乘积为 $s$，那么 $s\equiv 1 \ (\mod n)$。</p>
</li>
<li><p>此时可以设除 $a_i$ 外其他数的乘积是 $p$，那么：$a_ip\equiv 1\ (\mod n)$，根据裴蜀定理，此时 $gcd(a_i,n)=1$。</p>
</li>
<li><p>之后把所有与 $n$ 互质的数在模 $n$ 意义下乘起来，可以得到一个小于 $n$ 的数 $ans$ ， $ans$ 一定与 $n$ 互质。（辗转相除的原理）</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> s=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(__gcd(i,n)==<span class="number">1</span>)&#123;</span><br><span class="line">            w[i]=<span class="number">1</span>;</span><br><span class="line">            s=s*i%n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s!=<span class="number">1</span>)w[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[i])cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[i])cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最关键的就是得知道裴蜀定理的应用。</p>
</blockquote>
<h2 id="1548B-Integers-Have-Friends-1800-数学"><a href="#1548B-Integers-Have-Friends-1800-数学" class="headerlink" title="1548B- Integers Have Friends *1800 数学"></a>1548B- Integers Have Friends <strong>*1800</strong> 数学</h2><ul>
<li><p>要让 $a<em>i \mod m =a</em>{i+1} \mod m=…a<em>j \mod m$，此时很容易知道，对于相邻两项，有：$|a_i-a</em>{i+1}| \mod m=0$，然后前面的式子有 $j-i$ 个，此时要让所有数 $\mod m=0$，就是得让 $\gcd(|a<em>i-a</em>{i+1}|,|a<em>{i+1}-a</em>{i+2}|,…)&gt;1$。</p>
</li>
<li><p>那个 $\gcd$ 的值是自定义的并且是寻找最长的区间使得 $\gcd&gt;1$，因此可以采用<strong>取尺法</strong>。</p>
</li>
<li><p>区间的 $\gcd$ 值可以用 st 表维护。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">20</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!j)f[i][j]=c[i];</span><br><span class="line">            <span class="keyword">else</span> f[i][j]=__gcd(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">log2</span>(r-l<span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">return</span> __gcd(f[l][len],f[r-(<span class="number">1</span>&lt;&lt;len)<span class="number">+1</span>][len]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i],c[i]=<span class="built_in">abs</span>(w[i]-w[i<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mx=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1</span>;r&lt;=n;r++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r&amp;&amp;<span class="built_in">query</span>(l<span class="number">+1</span>,r)&lt;=<span class="number">1</span>)l++;</span><br><span class="line">        mx=<span class="built_in">max</span>(mx,r-l<span class="number">+1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;mx&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>求最长区间满足某个条件的题目可以考虑取尺法。取尺法本质就是两个同向指针。<br><strong>尺取法处理是问题是一段连续的区间，区间是单调的。</strong></p>
<p><a href="https://www.acwing.com/blog/content/4409/">引用</a></p>
<p>使用尺取法时应清楚以下四点：</p>
<p>1、  什么情况下能使用尺取法?  2、何时推进区间的端点？ 3、如何推进区间的端点？ 3、何时结束区间的枚举？</p>
<p>尺取法通常适用于选取区间有一定规律，或者说所选取的区间有一定的变化趋势的情况，通俗地说，在对所选取区间进行判断之后，我们可以明确如何进一步有方向地推进区间端点以求解满足条件的区间，如果已经判断了目前所选取的区间，但却无法确定所要求解的区间如何进一步</p>
<p>得到根据其端点得到，那么尺取法便是不可行的。首先，明确题目所需要求解的量之后，区间左右端点一般从最整个数组的起点开始，之后判断区间是否符合条件在根据实际情况变化区间的端点求解答案。</p>
</blockquote>
<h2 id="1633D-Make-Them-Equal-1600-dp-数学"><a href="#1633D-Make-Them-Equal-1600-dp-数学" class="headerlink" title="1633D-Make Them Equal *1600 dp+数学"></a>1633D-Make Them Equal <strong>*1600</strong> dp+数学</h2><ul>
<li><p>对于每个数 $a_i$，有 $a_i+\lfloor \frac{a_i}{x} \rfloor$，又因为数组的数最大也就 $10^3$，因此可以预处理出最小操作次数，即： $i=i+i/j$，这个可以暴力取枚举。</p>
</li>
<li><p>对于后面的操作就是直接 <code>01背包</code>，因为每个数可以操作和不操作两种情况，对于 <code>01背包</code> 也就是选和不选两种情况。</p>
</li>
<li><p>特判：如果操作次数大于等于 $a$ 数组的和，此时说明所有的数都可以被遍历到。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">0</span>,<span class="number">1000</span>)g[i]=<span class="number">1e18</span>;</span><br><span class="line">    g[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,<span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">1</span>,i)&#123;</span><br><span class="line">            <span class="type">int</span> k=i+i/j;</span><br><span class="line">            g[k]=<span class="built_in">min</span>(g[k],g[i]<span class="number">+1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>,tc=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;a[i],tot+=a[i];</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;b[i],tc+=b[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(k&gt;=tot)&#123;</span><br><span class="line">        cout&lt;&lt;tc&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">0</span>,k<span class="number">+1</span>)f[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">FORD</span>(j,g[a[i]],k)&#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-g[a[i]]]+b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;f[k]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数小的时候多考虑预处理和dp，题目中是操作次数有选和不选两种情况。</p>
<p><strong>卡：没有想到去预处理，然后想了非常复杂的贪心，<del>太菜了</del></strong></p>
</blockquote>
<h2 id="1758D-Range-√Sum-1800-构造"><a href="#1758D-Range-√Sum-1800-构造" class="headerlink" title="1758D-Range = √Sum *1800 构造"></a>1758D-Range = √Sum <strong>*1800</strong> 构造</h2><ul>
<li><p>可以很容易想到偶数的构造是：<script type="math/tex">...,n-2,n-1,n+1,n+2,...</script>，这个的和是 $n^2$，而且最大值减最小值就是 $n$。</p>
</li>
<li><p>奇数考虑：<script type="math/tex">\frac{n}{2}+2,...,n,...,n+3,...,\frac{3n}{2}+3</script>。这个的和是 $(n+1)^2$，最大值减最小值是 $(n+1)$。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(i,n/<span class="number">2</span><span class="number">+2</span>,n)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">FOR</span>(i,n<span class="number">+3</span>,n+n/<span class="number">2</span><span class="number">+3</span>)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(i,n-n/<span class="number">2</span>,n+n/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=n)&#123;</span><br><span class="line">                cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>构造的题还是多多举例，有的时候很经常要 <strong>奇偶分讨</strong>。</p>
</blockquote>
<h2 id="1774B-Coloring-1500-数学"><a href="#1774B-Coloring-1500-数学" class="headerlink" title="1774B-Coloring *1500 数学"></a>1774B-Coloring <strong>*1500</strong> 数学</h2><ul>
<li><p>本题要求构造一个序列，要求连续 $k$ 个数不能重复。</p>
</li>
<li><p>可以将每 $k$ 个数看作一组，显然有 $(n + k - 1) / k$ 组，一个数最多只能在每组中出现一次，<br>因此如果存在 $a_i &gt; (n + k - 1) / k$，则一定无解。</p>
</li>
<li><p>最后一组并不一定有 $k$ 个，而是有 $(n - 1) % k + 1$（最后一组不可能为 $0$，特殊处理一下），<br>这意味着只有 $(n - 1) % k + 1$ 能出现 $(n + k - 1) / k$ 次，因此统计一下出现 $(n + k - 1) / k$<br>次的数的个数 $cnt$，如果 $cnt &gt; (n - 1) % k + 1$，则也一定无解。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,m)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t=(n+k<span class="number">-1</span>)/k;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1e18</span>;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[i]&gt;t)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(w[i]==t)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;=(n<span class="number">-1</span>)%k<span class="number">+1</span>)cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>没有想到平均分组，当时想的太混乱了。如果想到平均分组的话，那这道题就很简单了。<del>qwq</del></p>
</blockquote>
<h2 id="1774D-Same-Count-One-1600-思维"><a href="#1774D-Same-Count-One-1600-思维" class="headerlink" title="1774D-Same Count One *1600 思维"></a>1774D-Same Count One <strong>*1600</strong> 思维</h2><ul>
<li><p>就是先把横向统计一下，然后看纵向的 $1$ 的个数，这里有维护每一行的 $1$ 的个数。</p>
</li>
<li><p>特判比较容易，这里就不强调了。</p>
</li>
<li><p>然后就把某一列多余平均的给少于平均的，然后更新一下它们的值。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;<span class="built_in">w</span>(n<span class="number">+1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m<span class="number">+1</span>,<span class="number">0</span>));</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">col</span>(n<span class="number">+1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">            cin&gt;&gt;w[i][j];</span><br><span class="line">            <span class="keyword">if</span>(w[i][j])&#123;</span><br><span class="line">                tot++;</span><br><span class="line">                s++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        col[i]=s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tot%n!=<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tot/=n;</span><br><span class="line"></span><br><span class="line">    VI zero,one;</span><br><span class="line"></span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>,3&gt;&gt;res;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        one.<span class="built_in">clear</span>(),zero.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(col[j]&gt;tot&amp;&amp;w[j][i]==<span class="number">1</span>)one.<span class="built_in">pb</span>(j);</span><br><span class="line">            <span class="keyword">if</span>(col[j]&lt;tot&amp;&amp;w[j][i]==<span class="number">0</span>)zero.<span class="built_in">pb</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">0</span>,<span class="built_in">min</span>(one.sz,zero.sz)<span class="number">-1</span>)&#123;</span><br><span class="line">            res.<span class="built_in">pb</span>(&#123;zero[j],one[j],i&#125;);</span><br><span class="line">            col[one[j]]--;</span><br><span class="line">            col[zero[j]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res.sz&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [x,y,z]:res)&#123;</span><br><span class="line">        cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;y&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;z&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这就是很单纯的贪心，个人已经想到预处理每一行 $1$ 的个数，然后肯定跟平均值有关，然后肯定是从多余平均的转移到少于平均的。然后就不想去了。<del>服了，就差一步。</del></p>
</blockquote>
<h2 id="1776L-Controllers-1500-数学"><a href="#1776L-Controllers-1500-数学" class="headerlink" title="1776L-Controllers *1500 数学"></a>1776L-Controllers <strong>*1500</strong> 数学</h2><ul>
<li>因为给定的数只有两个 $a,b$，因此可以很容易的建立如下方程组：</li>
</ul>
<p>设 $a$ 的 <code>+</code> 使用次数为 $u$，<code>-</code> 使用次数为 $v$，设使用字符串中的 <code>+</code> 的数量是 $x$， <code>-</code> 的数量是 $y$，那么有：</p>
<script type="math/tex; mode=display">au-av+b(x-u)-b(y-v)=0</script><script type="math/tex; mode=display">(u−v)⋅(a−b)=−(x−y)⋅b</script><ul>
<li><p>接下来是分类讨论一下：</p>
</li>
<li><ul>
<li>当 $a-b=0$，，$x−y$ 必为 $0$，否则无解。</li>
</ul>
</li>
<li><ul>
<li>当 $a−b\not=0$ 时，显然 $u−v=a−b−(x−y)⋅b$​。根据，$0≤u≤x，0≤v≤y$，通过这两个不等式解得 $−y≤u−v≤x$。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==y)cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> m=x-y;</span><br><span class="line">        <span class="keyword">if</span>(b*m%(b-a))&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> k=b*m/(b-a);</span><br><span class="line">            <span class="keyword">if</span>(k&gt;=-y&amp;&amp;k&lt;=x)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>考的就是方程组，还是解不等式的。</p>
</blockquote>
<h2 id="1868B1-Candy-Party-Easy-Version-1700-位运算"><a href="#1868B1-Candy-Party-Easy-Version-1700-位运算" class="headerlink" title="1868B1-Candy Party (Easy Version) *1700 位运算"></a>1868B1-Candy Party (Easy Version) <strong>*1700</strong> 位运算</h2><ul>
<li><p>由于题目说什么转移 $2^x$ 颗糖果，此时就得考虑二进制——位运算了。</p>
</li>
<li><p>对于每一个数与平均数的差值 $b_i$，可以将它拆成 $2^x-2^y$ 的形式。</p>
</li>
<li><p>如果 $b_i$ 变不成这种形式，那么不可能满足条件——得到和付出 $2^x$ 颗糖果。</p>
</li>
<li><p>此时存储满足的 $x$ 和 $y$ 值，如果所有的 $x=y$，那么满足条件。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i],sum+=w[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sum%n!=<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum/=n;</span><br><span class="line"></span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; m1,m2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="type">int</span> k=w[i]-sum;</span><br><span class="line">        <span class="keyword">if</span>(!k)<span class="keyword">continue</span>;<span class="comment">//bi=2^x-2^y</span></span><br><span class="line">        <span class="type">int</span> c=<span class="built_in">abs</span>(k);</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">log2</span>(c)<span class="number">+1</span>,y=<span class="built_in">log2</span>((<span class="number">1</span>&lt;&lt;x)-c);</span><br><span class="line">        <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;x)-(<span class="number">1</span>&lt;&lt;y)!=c)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;nO&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        m1[x]++,m1[y]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">0</span>,<span class="number">32</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m1[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;yEs&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>想到了位运算，但卡在：没有把形式很清晰的拆成 $2^x-2^y$ 的形式来做。</p>
<p>以后遇到类似的话，可以考虑某一个东西（比如差值，变化量等）有一种比较清晰的形式去表示。</p>
</blockquote>
<h2 id="1948C-Arrow-Path-1300"><a href="#1948C-Arrow-Path-1300" class="headerlink" title="1948C-Arrow Path *1300"></a>1948C-Arrow Path <strong>*1300</strong></h2><ul>
<li>大型 <code>bfs</code> 水题。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;PII&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> [x,y]=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> a=dx[i]+x,b=dy[i]+y;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">1</span>||b&lt;<span class="number">1</span>||a&gt;<span class="number">2</span>||b&gt;n)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(s[a][b]==<span class="string">&#x27;&gt;&#x27;</span>)&#123;</span><br><span class="line">                b++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                b--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(vis[a][b])<span class="keyword">continue</span>;</span><br><span class="line">            vis[a][b]=<span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;a,b&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">0</span>,<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">1</span>,n)&#123;</span><br><span class="line">            vis[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;s[<span class="number">1</span>][i];</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;s[<span class="number">2</span>][i];</span><br><span class="line"></span><br><span class="line">    vis[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;(vis[<span class="number">2</span>][n]?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1948D-Tandem-Repeats-1700-贪心-模拟"><a href="#1948D-Tandem-Repeats-1700-贪心-模拟" class="headerlink" title="1948D-Tandem Repeats? *1700 贪心+模拟"></a>1948D-Tandem Repeats? <strong>*1700</strong> 贪心+模拟</h2><ul>
<li>由于这个数组长度不大，直接暴力枚举就可以了。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line"></span><br><span class="line">    n=s.sz;</span><br><span class="line"></span><br><span class="line">    s=<span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=n/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n/<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="type">int</span> x=i,mx=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j+x&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]==s[j+x]||s[j]==<span class="string">&#x27;?&#x27;</span>||s[j+x]==<span class="string">&#x27;?&#x27;</span>)&#123;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                p=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mx=<span class="built_in">max</span>(mx,p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mx&gt;=i)ans=<span class="built_in">max</span>(ans,<span class="number">2</span>*i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>刚开始还想着二分答案，没想到答案不具有单调性，比如 <code>c?csadasihd</code>，可能后面还能让它更优但二分不下去了。</p>
</blockquote>
<h2 id="1954B-Make-It-Ugly-1200"><a href="#1954B-Make-It-Ugly-1200" class="headerlink" title="1954B-Make It Ugly *1200"></a>1954B-Make It Ugly <strong>*1200</strong></h2><ul>
<li><p>其实总的思路就是从两端往中间靠，就是得注意这种情况：<code>1 2 2 1</code> ，此时答案为 <code>0</code>。</p>
</li>
<li><p>因此考虑的情况有：</p>
</li>
<li><ul>
<li>删除持续删除队尾。</li>
</ul>
</li>
<li><ul>
<li>删除持续删除队头。</li>
</ul>
</li>
<li><ul>
<li>删除中间元素。</li>
</ul>
</li>
<li><p>综上所述，只需要当 $a_i=a_1$ 的时候，再删除。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;S;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i],S[w[i]]++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(S[w[<span class="number">1</span>]]==n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans=n,len=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[i]==w[<span class="number">1</span>])&#123;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,len);</span><br><span class="line">            len=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans=<span class="built_in">min</span>(ans,len);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>漏了考虑中间元素的删除情况。</p>
</blockquote>
<h2 id="1969C-Minimizing-the-Sum-1700-dp"><a href="#1969C-Minimizing-the-Sum-1700-dp" class="headerlink" title="1969C-Minimizing the Sum *1700 dp"></a>1969C-Minimizing the Sum <strong>*1700</strong> dp</h2><ul>
<li><p>题目说用相邻的元素去替换，那么当把时间范围拉长，此时就是一段区间一段区间的了。</p>
</li>
<li><p>由于一个数可以更新多个之相邻的连续的数，最终效果就是这一段的数都变成了这一段的最小值。</p>
</li>
<li><p>所以不妨枚举每个段，使之变为最小值，再进行转移。</p>
</li>
<li><p>所以设 $f_{i,j}$ 为在前 $i$ 个元素，最多操作 $k$ 次的最小总和。</p>
</li>
<li><p>状态转移：$f<em>{i+l,j+l}=\min(f</em>{i-1,j}+(l-1)*minv)$。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;K;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">0</span>,K)&#123;</span><br><span class="line">            f[i][j]=<span class="number">1e18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">0</span>,K)&#123;</span><br><span class="line">            <span class="type">int</span> minv=<span class="number">1e18</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l+j&lt;=K&amp;&amp;l+i&lt;=n;l++)&#123;<span class="comment">//固定长度去枚举最小值</span></span><br><span class="line">                minv=<span class="built_in">min</span>(minv,w[i+l]);</span><br><span class="line">                f[i+l][l+j]=<span class="built_in">min</span>(f[i+l][l+j],f[i<span class="number">-1</span>][j]+(l<span class="number">+1</span>)*minv);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">0</span>,K)&#123;</span><br><span class="line">        ans=<span class="built_in">min</span>(ans,f[n][i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>是想到dp了，但没有想到优化，就是按照固定长度去枚举最小值放入。而且如果不按照区间的转移，转移方程很难写。（就是卡在对于相邻问题没有考虑区间进行转移）。</p>
</blockquote>
<h2 id="1971G-XOUR-1700-构造"><a href="#1971G-XOUR-1700-构造" class="headerlink" title="1971G-XOUR *1700 构造"></a>1971G-XOUR <strong>*1700</strong> 构造</h2><ul>
<li><p>要让 $a_i \oplus a_j&lt;4$，此时：$\lfloor \frac{a_i}{4}\rfloor = \lfloor \frac{a_j}{4} \rfloor$。</p>
</li>
<li><p>也就是：所有除四下取整相同的 $a_i$​ 都可以按照原来的位置排序。</p>
</li>
<li><p>此时就用小堆来维护 $\lfloor \frac{a_i}{4}\rfloor$ 的值。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    map&lt;<span class="type">int</span>,priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt;&gt;S;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        S[w[i]/<span class="number">4</span>].<span class="built_in">push</span>(w[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cout&lt;&lt;S[w[i]/<span class="number">4</span>].<span class="built_in">top</span>()&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        S[w[i]/<span class="number">4</span>].<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>没有想到 $\lfloor \frac{a_i}{4}\rfloor = \lfloor \frac{a_j}{4} \rfloor$。</p>
</blockquote>
<h2 id="1983A-Array-Divisibility-水题"><a href="#1983A-Array-Divisibility-水题" class="headerlink" title="1983A-Array Divisibility 水题"></a>1983A-Array Divisibility 水题</h2><ul>
<li>思路就是直接输出 $1,2,3,…,n$。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1983B-Corner-Twist-1200-思维"><a href="#1983B-Corner-Twist-1200-思维" class="headerlink" title="1983B-Corner Twist *1200 思维"></a>1983B-Corner Twist <strong>*1200</strong> 思维</h2><ul>
<li>首先得发现一个性质：每次变化每行和每列模 $3$ 的值都是不变的。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="type">char</span> c;</span><br><span class="line">            cin&gt;&gt;c;</span><br><span class="line">            s[i][j]=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            sa[i]=<span class="number">0</span>,ta[i]=<span class="number">0</span>;</span><br><span class="line">            tb[j]=<span class="number">0</span>,sb[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">            <span class="type">char</span> c;</span><br><span class="line">            cin&gt;&gt;c;</span><br><span class="line">            t[i][j]=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">            sa[i]=(sa[i]+s[i][j])%<span class="number">3</span>;</span><br><span class="line">            ta[i]=(ta[i]+t[i][j])%<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,<span class="number">1</span>,n)&#123;</span><br><span class="line">            sb[i]=(sb[i]+s[j][i])%<span class="number">3</span>;</span><br><span class="line">            tb[i]=(tb[i]+t[j][i])%<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sa[i]!=ta[i])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sb[i]!=tb[i])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1983C-Have-Your-Cake-and-Eat-It-Too-1400-双指针"><a href="#1983C-Have-Your-Cake-and-Eat-It-Too-1400-双指针" class="headerlink" title="1983C-Have Your Cake and Eat It Too *1400 双指针"></a>1983C-Have Your Cake and Eat It Too <strong>*1400</strong> 双指针</h2><ul>
<li><p>就直接枚举每一种情况，然后如果有这种情况，就直接输出即可。</p>
</li>
<li><p>枚举的每一种情况就是用双指针维护。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> b[],<span class="type">int</span> c[],<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z,<span class="type">int</span> tot)</span></span>&#123;</span><br><span class="line">    vector&lt;PII&gt;<span class="built_in">res</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> sa=<span class="number">0</span>,sb=<span class="number">0</span>,sc=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(sa&lt;tot)sa+=a[l++];</span><br><span class="line">    <span class="keyword">while</span>(sc&lt;tot)sc+=c[r--];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,l,r)&#123;</span><br><span class="line">        sb+=b[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout&lt;&lt;l&lt;&lt;&#x27; &#x27;&lt;&lt;r&lt;&lt;&#x27; &#x27;&lt;&lt;sa&lt;&lt;&#x27; &#x27;&lt;&lt;sb&lt;&lt;&#x27; &#x27;&lt;&lt;sc&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sb&lt;tot)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    res[<span class="number">1</span>]=&#123;<span class="number">1</span>,l<span class="number">-1</span>&#125;;</span><br><span class="line">    res[<span class="number">2</span>]=&#123;l,r&#125;;</span><br><span class="line">    res[<span class="number">3</span>]=&#123;r<span class="number">+1</span>,n&#125;;</span><br><span class="line">    </span><br><span class="line">    id[x]=<span class="number">1</span>,id[y]=<span class="number">2</span>,id[z]=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res[id[<span class="number">1</span>]].fi&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;res[id[<span class="number">1</span>]].se&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout&lt;&lt;res[id[<span class="number">2</span>]].fi&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;res[id[<span class="number">2</span>]].se&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout&lt;&lt;res[id[<span class="number">3</span>]].fi&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;res[id[<span class="number">3</span>]].se&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;a[i],s+=a[i];</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;b[i];</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;c[i];</span><br><span class="line"></span><br><span class="line">    s=(s<span class="number">+2</span>)/<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">f</span>(a,b,c,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,s))<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">f</span>(a,c,b,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,s))<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">f</span>(b,a,c,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,s))<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">f</span>(b,c,a,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,s))<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">f</span>(c,a,b,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,s))<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">f</span>(c,b,a,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,s))<span class="keyword">return</span>;</span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>错误原因：没有正确处理好对应关系，就是 <code>f</code> 函数里面的对应关系。<br>以后就多考虑，自己先写认真考虑一遍再写。</p>
</blockquote>
<h2 id="2001A-Make-All-Equal-水题"><a href="#2001A-Make-All-Equal-水题" class="headerlink" title="2001A-Make All Equal 水题"></a>2001A-Make All Equal 水题</h2><ul>
<li>不说了。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;S;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        S[w[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [x,y]:S)&#123;</span><br><span class="line">        t=<span class="built_in">max</span>(t,y);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;n-t&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2001B-Generate-Permutation-水题"><a href="#2001B-Generate-Permutation-水题" class="headerlink" title="2001B-Generate Permutation 水题"></a>2001B-Generate Permutation 水题</h2><ul>
<li>可以很容易发现规律就是：如果是偶数就不行，奇数的话按照这种输出：$\lceil \frac{n}{2} \rceil+1,…,n,1,\lceil \frac{n}{2} \rceil$。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(n&amp;<span class="number">1</span>))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> t=(n<span class="number">+1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">FORD</span>(i,t<span class="number">+1</span>,n)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">FOR</span>(i,<span class="number">1</span>,t)cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2001C-Guess-The-Tree-1500-交互题-分治思想"><a href="#2001C-Guess-The-Tree-1500-交互题-分治思想" class="headerlink" title="2001C-Guess The Tree *1500 交互题+分治思想"></a>2001C-Guess The Tree <strong>*1500</strong> 交互题+分治思想</h2><ul>
<li><p>本质上就是先从 $1$ 开始猜，如果这里有边的话，就递归 $a,mid$ 和 $mid,b$。</p>
</li>
<li><p>这样的时间复杂度是优秀的。</p>
</li>
</ul>
<p>递归的总思路：<a href="https://www.luogu.com.cn/article/dwk0k5zu">来源</a></p>
<blockquote>
<p>总的思路：每次询问树根与一个未被标记的点 。然后递归处理：</p>
<p>先把询问的 b 点标记，并得到中点 x。现在需要处理 x 到 b 的路径和 a 到 x 的路径。</p>
<p>对于前者，直接递归下去即可。</p>
<p>对于后者，分类讨论一下：若 x 已被标记，说明 x 到根上的路径已经被确定，不需要处理；如果未被标记，则递归处理 a 到 x 的路径。</p>
<p>递归的终止条件为询问的点 a 与得到的点 x 相同（因为这时询问的 a,b 两点相邻），此时要把 a,b 连边。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="comment">//分治思想</span></span><br><span class="line">    vis[b]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid=<span class="built_in">query</span>(a,b);</span><br><span class="line">    <span class="keyword">if</span>(mid==a)&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(&#123;a,b&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!vis[mid])<span class="built_in">dfs</span>(a,mid);</span><br><span class="line">    <span class="built_in">dfs</span>(mid,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">2</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(<span class="number">1</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;! &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [x,y]:ans)&#123;</span><br><span class="line">        cout&lt;&lt;x&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;y&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>没有想到用分治去优化时间复杂度，如果按照暴力的话时间复杂度是 $O(n^2)$，如果是分治的话，时间复杂度可以降到 $O(n\sqrt n)$。</p>
</blockquote>
<h2 id="2005B2-The-Strict-Teacher-Hard-Version-1200-水题二分"><a href="#2005B2-The-Strict-Teacher-Hard-Version-1200-水题二分" class="headerlink" title="2005B2-The Strict Teacher (Hard Version) *1200 水题二分"></a>2005B2-The Strict Teacher (Hard Version) <strong>*1200</strong> 水题二分</h2><p><del>这道题是我最开始刷codeforces的比赛题目，我记得当时我连这种题目做的都很困难，现在看来我当时是真傻。</del></p>
<ul>
<li>不说了。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,m)cin&gt;&gt;b[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        <span class="type">int</span> lt=<span class="built_in">upper_bound</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+m,x)-b<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> rt=lt<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!lt)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">max</span>&lt;<span class="type">int</span>&gt;(<span class="number">0</span>,b[<span class="number">1</span>]<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rt&gt;m)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">max</span>&lt;<span class="type">int</span>&gt;(<span class="number">0</span>,n-b[lt])&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> t=(b[lt]+b[rt])/<span class="number">2</span>;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">min</span>(<span class="built_in">abs</span>(b[lt]-t),<span class="built_in">abs</span>(b[rt]-t))&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2032C-Trinity-1400-双指针-思维"><a href="#2032C-Trinity-1400-双指针-思维" class="headerlink" title="2032C-Trinity *1400 双指针+思维"></a>2032C-Trinity <strong>*1400</strong> 双指针+思维</h2><ul>
<li><p>这道题就先排序，因为排序不会影响答案的个数。</p>
</li>
<li><p>其次把问题转化，题目问三角形数组的个数，此时就转化成总的个数减去不满足三角形数组的个数。</p>
</li>
<li><p>不满足三角形个数的可以直接用双指针维护。</p>
</li>
<li><p>为什么可以呢？因为不满足的个数有两个指针就是相邻的，这样可以把三维的变量转化成二维的变量，然后二维的变量就可以用双指针算法去解决。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FOR</span>(i,<span class="number">1</span>,n)cin&gt;&gt;w[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(w<span class="number">+1</span>,w<span class="number">+1</span>+n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(r&lt;=n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=n&amp;&amp;w[l]+w[l<span class="number">+1</span>]&lt;=w[r])l++;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,r-l<span class="number">+1</span>);</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;n-ans&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>三维变量转化为二位变量可以采取：CDQ分治、排序、转化题意（变成双指针形式）。</p>
</blockquote>
<h2 id="Gym-102992F-Fireworks-三分-概率"><a href="#Gym-102992F-Fireworks-三分-概率" class="headerlink" title="Gym-102992F Fireworks 三分+概率"></a>Gym-102992F Fireworks 三分+概率</h2><ul>
<li><p>假设一个 $E(x)$，表示多次造 $k$ 个烟花后燃放，出现至少一个完美烟花的概率最大的最小期望，简称最优。</p>
</li>
<li><p>形象的讲（不保证正确，但是好理解）：每次都造 $k$ 个后燃放出现完美烟花的概率是最大的，所以每次我们都只造 $k$ 个烟花后燃放。</p>
</li>
<li><p>因此：</p>
</li>
</ul>
<script type="math/tex; mode=display">E(x)=(k×n+m)×(1−(1−p)^k)+(k×n+m)×(1−p)^k+E(x)×(1−p)^k</script><ul>
<li>化简：</li>
</ul>
<script type="math/tex; mode=display">E(x)=\frac{1−(1−p)^k}{k×n+m}​</script><ul>
<li>求导可以看出该函数是个具有波谷的函数，用三分找到 $k$ 次就可求出 $E(x)$。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">EK</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n*x+m)/(<span class="number">1</span>-<span class="built_in">pow</span>((<span class="number">1</span>-p),x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line"></span><br><span class="line">    p=p/<span class="number">1e4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> l=<span class="number">1</span>,r=<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((r-l)&gt;eps)&#123;</span><br><span class="line">        <span class="type">double</span> midl=l+(r-l)/<span class="number">3</span>;</span><br><span class="line">        <span class="type">double</span> midr=r-(r-l)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">EK</span>(midl)&gt;<span class="built_in">EK</span>(midr))l=midl;</span><br><span class="line">        <span class="keyword">else</span> r=midr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>,<span class="built_in">EK</span>(r));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>具有波谷或波峰的函数可以采用三分来维护。</p>
</blockquote>
<p>这几天总结与评价：刷题还是得看重质量，往后还是按照 $+100$ <code>rating</code> $2-5$ 题的模式做，最重要的是认真总结。接下来大概花2-3天去把我之前把牛客的专题的题给总结了。</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
